[{"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\index.js":"1","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\App.js":"2","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\rosWebsocket.js":"3","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\config.js":"4","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\ExternalConfigurationHandler.js":"5","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\interceptor.js":"6","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\actionTypes.js":"7","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\LoaderAlt\\LoaderAlt.js":"8","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\index.js":"9","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Clock\\Clock.js":"10","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Popup\\Popup.js":"11","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Error\\Error.js":"12","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\GlobalMessage\\GlobalMessage.js":"13","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\ContextMenu\\ContextMenu.js":"14","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Main\\Main.js":"15","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\MissionPlanner.js":"16","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\utils\\geoCalculations.js":"17","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Select\\Select.js":"18","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\index.js":"19","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\videoReducer.js":"20","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\mapReducer.js":"21","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\outputReducer.js":"22","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\layoutReducer.js":"23","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\plannerReducer.js":"24","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Popup\\PopupChildren.js":"25","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Select\\reactSelectStyles.js":"26","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Video\\Video.js":"27","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\ActionButtons\\ActionButtons.js":"28","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\MissionPlanStages\\MissionPlanStages.js":"29","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\FlightTelemetry\\FlightTelemetry.js":"30","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\OutputTabs\\OutputTabs.js":"31","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MapContainer\\MapContainer.js":"32","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\mapActions.js":"33","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\layoutActions.js":"34","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\videoActions.js":"35","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\outputActions.js":"36","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\plannerActions.js":"37","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\SingleInputForm\\SingleInputForm.js":"38","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\AddMissionPlanStageForm\\AddMissionPlanStageForm.js":"39","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\MissionPlanStages\\MissionPlanStage.js":"40","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Slider\\Slider.js":"41","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\SwitchMapForm\\SwitchMapForm.js":"42","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\utils\\imageUtils.js":"43","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Input\\Input.js":"44","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\services\\index.js":"45","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Radio\\Radio.js":"46","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\RadioGroup\\RadioGroup.js":"47","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Toggle\\Toggle.js":"48"},{"size":1859,"mtime":1622560606051,"results":"49","hashOfConfig":"50"},{"size":13716,"mtime":1625399756042,"results":"51","hashOfConfig":"50"},{"size":3099,"mtime":1623164277886,"results":"52","hashOfConfig":"50"},{"size":1711,"mtime":1623242764110,"results":"53","hashOfConfig":"50"},{"size":322,"mtime":1614504850000,"results":"54","hashOfConfig":"50"},{"size":656,"mtime":1614504850000,"results":"55","hashOfConfig":"50"},{"size":3084,"mtime":1625146552248,"results":"56","hashOfConfig":"50"},{"size":756,"mtime":1614504850000,"results":"57","hashOfConfig":"50"},{"size":474,"mtime":1619954508908,"results":"58","hashOfConfig":"50"},{"size":943,"mtime":1614504850000,"results":"59","hashOfConfig":"50"},{"size":5462,"mtime":1620229631034,"results":"60","hashOfConfig":"50"},{"size":205,"mtime":1614504850000,"results":"61","hashOfConfig":"50"},{"size":2172,"mtime":1619954508851,"results":"62","hashOfConfig":"50"},{"size":3388,"mtime":1622040913572,"results":"63","hashOfConfig":"50"},{"size":1556,"mtime":1623240805421,"results":"64","hashOfConfig":"50"},{"size":11625,"mtime":1623239906976,"results":"65","hashOfConfig":"50"},{"size":2320,"mtime":1623238127150,"results":"66","hashOfConfig":"50"},{"size":697,"mtime":1623163851709,"results":"67","hashOfConfig":"50"},{"size":358,"mtime":1619954508896,"results":"68","hashOfConfig":"50"},{"size":534,"mtime":1614504850000,"results":"69","hashOfConfig":"50"},{"size":3870,"mtime":1623238410139,"results":"70","hashOfConfig":"50"},{"size":1579,"mtime":1625146782392,"results":"71","hashOfConfig":"50"},{"size":3522,"mtime":1623239635978,"results":"72","hashOfConfig":"50"},{"size":3964,"mtime":1623240805439,"results":"73","hashOfConfig":"50"},{"size":295,"mtime":1620571381164,"results":"74","hashOfConfig":"50"},{"size":3031,"mtime":1619954508883,"results":"75","hashOfConfig":"50"},{"size":8936,"mtime":1623240805435,"results":"76","hashOfConfig":"50"},{"size":4792,"mtime":1625146782428,"results":"77","hashOfConfig":"50"},{"size":1354,"mtime":1622364345969,"results":"78","hashOfConfig":"50"},{"size":1384,"mtime":1623306635516,"results":"79","hashOfConfig":"50"},{"size":11523,"mtime":1623316684057,"results":"80","hashOfConfig":"50"},{"size":107567,"mtime":1626010109215,"results":"81","hashOfConfig":"50"},{"size":720,"mtime":1622376122670,"results":"82","hashOfConfig":"50"},{"size":429,"mtime":1625146552235,"results":"83","hashOfConfig":"50"},{"size":10442,"mtime":1625146782393,"results":"84","hashOfConfig":"50"},{"size":175,"mtime":1619954508902,"results":"85","hashOfConfig":"50"},{"size":4955,"mtime":1625147153415,"results":"86","hashOfConfig":"50"},{"size":1394,"mtime":1620573157621,"results":"87","hashOfConfig":"50"},{"size":5936,"mtime":1623240321908,"results":"88","hashOfConfig":"50"},{"size":6283,"mtime":1623310652219,"results":"89","hashOfConfig":"50"},{"size":2651,"mtime":1616331217119,"results":"90","hashOfConfig":"50"},{"size":2919,"mtime":1619954508874,"results":"91","hashOfConfig":"50"},{"size":804,"mtime":1614504850000,"results":"92","hashOfConfig":"50"},{"size":3580,"mtime":1620221529430,"results":"93","hashOfConfig":"50"},{"size":4784,"mtime":1623228059327,"results":"94","hashOfConfig":"50"},{"size":1117,"mtime":1614504850000,"results":"95","hashOfConfig":"50"},{"size":912,"mtime":1619954508879,"results":"96","hashOfConfig":"50"},{"size":721,"mtime":1625146791938,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"yrq1ot",{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":82,"fixableErrorCount":0,"fixableWarningCount":7,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\index.js",[],["206","207"],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\App.js",["208","209","210","211","212"],"import React, { PureComponent, Component } from 'react';\r\nimport logo from '../src/assets/images/newLogo.svg';\r\nimport classNames from './App.module.css';\r\nimport Loader from './components/LoaderAlt/LoaderAlt';\r\nimport Clock from './components/Clock/Clock';\r\nimport Select from './components/controls/Select/Select';\r\nimport Popup from './components/Popup/Popup';\r\nimport Error from './components/Error/Error';\r\nimport GlobalMessage from './components/GlobalMessage/GlobalMessage';\r\nimport actionTypes from './store/actions/actionTypes';\r\nimport { connect } from 'react-redux';\r\nimport ContextMenu from './components/ContextMenu/ContextMenu';\r\nimport externalConfig from './ExternalConfigurationHandler';\r\nimport { Switch, Route, withRouter } from 'react-router-dom';\r\nimport Main from './components/Main/Main';\r\nimport MissionPlanner from './components/MissionPlanner/MissionPlanner';\r\nimport * as geoCalculations from './utils/geoCalculations';\r\n\r\n\r\nconst dropDownStyles = {\r\n   \r\n    container: (provided, state) => ({\r\n      ...provided,\r\n      cursor: state.isDisabled ? \"not-allowed\" : \"pointer\",\r\n      width: '100%',      \r\n    }),\r\n    option: (provided, state) => ({\r\n        ...provided,      \r\n        '&:hover': {\r\n          backgroundColor:'var(--app-select-hover-color)',\r\n        },\r\n        color: state.data.color,\r\n        fontSize: 'var(--app-font-size)',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        backgroundColor: 'transparent',\r\n        border: state.isSelected ? '1px solid var(--app-select-selected-border-color)' : 'none',\r\n        cursor: state.isDisabled ? \"not-allowed\" : \"pointer\",\r\n    }),\r\n    control: (provided , state) => ({\r\n      // none of react-select's styles are passed to <Control />\r\n      ...provided,\r\n      borderRadius: '2px',\r\n      backgroundColor: 'transparent',\r\n      minHeight: 'unset',\r\n      borderColor: \"transparent\",\r\n      color:'var(--app-font-color)' ,\r\n      boxShadow: state.isFocused ? 0 : 0,\r\n      '&:hover': {\r\n        //borderColor: '#7f7f7f'\r\n      },\r\n      cursor: state.isDisabled ? \"not-allowed\" : \"pointer\",\r\n    }),\r\n    menu: (provided) => ({\r\n        ...provided,\r\n       backgroundColor: 'var(--app-bg-color-alt)',\r\n    }),\r\n    valueContainer: (provided) => ({\r\n        ...provided,\r\n        fontSize: 'var(--app-font-size)',\r\n        \r\n    }),\r\n    indicatorSeparator: (provided) => ({\r\n        ...provided,\r\n        display: 'none'\r\n    }),\r\n    dropdownIndicator: defaultStyles => ({\r\n        ...defaultStyles,\r\n        color: 'black' // your changes to the arrow\r\n    }),\r\n    singleValue: (provided, {data}) => ({        \r\n        ...provided,\r\n        fontSize: '18px',\r\n        fontWeight: 500,\r\n        color: data.color,\r\n    }),\r\n    placeholder: (provided) => ({\r\n        ...provided,\r\n        fontWeight: 500,\r\n        color: 'var(--app-font-color)'        \r\n    }),    \r\n    noOptionsMessage: (provided) => ({\r\n        ...provided,\r\n        fontWeight: 400,\r\n        color: 'var(--app-font-color)',\r\n        fontSize: 'var(--app-font-size)',  \r\n    }),\r\n    input: (provided) => ({\r\n        ...provided,\r\n        color: 'var(--app-font-color)',        \r\n    })    \r\n  }\r\n\r\n  const colors = [\r\n      'aqua',\r\n      'green',\r\n      'orange'\r\n  ];\r\n\r\nclass App extends Component {\r\n\r\n    disableZoomInTouchScreen = e => {\r\n        if (e.touches.length > 1) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.MapCore.SetStartCallbackFunction(this.props.setMapCoreSDKLoadedFlag);\r\n\r\n        const defaultGroup = externalConfig.getConfiguration().streamingLayers[0];\r\n        this.props.setMapToShow(defaultGroup);\r\n\r\n        //Disable zoom in touch\r\n        window.addEventListener('touchstart', this.disableZoomInTouchScreen, { passive: false });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('touchstart', this.disableZoomInTouchScreen);\r\n    }\r\n\r\n    closeErrorPopup = () => {\r\n        this.setState({\r\n            generalErrorMessage: false,\r\n        });\r\n    };\r\n\r\n    getGeneralErrorPopup() {\r\n        if (false) {\r\n            return (\r\n                <Popup\r\n                    buttonOk='OK'\r\n                    header={''}\r\n                    hideXButton\r\n                    onOk={this.closeErrorPopup}>\r\n                    <Error errorMsg={''} />\r\n                </Popup>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getClock() {\r\n        return <Clock />;\r\n    }\r\n\r\n    formatPosition(value) {\r\n        if (value === null || value === undefined) return null;\r\n        return Math.round(value);\r\n    }\r\n    renderDroneSelect() {    \r\n        const droneList = externalConfig.getConfiguration().DRONES_DATA.dronesList; \r\n        const options = droneList.map((number,i) => ({label: number, color: colors[i]}))\r\n        const dropDownData = {\r\n            styles: dropDownStyles,\r\n            defaultValue: options[0],\r\n            options,\r\n            onChange: droneNumber => this.handleTypeChange(droneNumber)\r\n        };\r\n\r\n        return (\r\n            <div className={classNames.Row}>\r\n                <Select {...dropDownData} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    handleTypeChange = (droneNumber) => {\r\n        this.props.selectDrone(droneNumber.label);\r\n    }\r\n\r\n    getMainHeader() {\r\n        const dronePosition = this.props.dronesPositions[this.props.selectedDrone];\r\n        let droneOffset = null;\r\n        let coordinateWithOffset = null;\r\n        if(dronePosition && dronePosition.offset){\r\n            droneOffset = geoCalculations.roundCoordinate(dronePosition.offset);\r\n            coordinateWithOffset = geoCalculations.getMapCoordinate(dronePosition.workingOrigin , dronePosition.offset);\r\n        }\r\n\r\n        let droneColor = colors[0];\r\n        const droneList = externalConfig.getConfiguration().DRONES_DATA.dronesList; \r\n        if(droneList.indexOf(this.props.selectedDrone) == 1){\r\n            droneColor = colors[1];\r\n        }\r\n        else if (droneList.indexOf(this.props.selectedDrone) == 2){\r\n            droneColor = colors[2];\r\n        }\r\n        return (\r\n            <header className={classNames.AppHeader} style={{borderBottomColor : droneColor }} >\r\n                <div className={classNames.LogoWrapper} onClick={() => this.props.history.push('/')}>\r\n                    <img src={logo} alt='logo' />\r\n                    <span className={classNames.VersionText}>version: 21.06.09 </span>\r\n                </div>\r\n                <div className={classNames.HeaderLeftWrapper}>\r\n                    <span className={`${classNames.HeaderItem} ${classNames.DroneSelectItem}`} style={{borderRightColor : droneColor, borderLeftColor : droneColor}}>\r\n                        <span style={{backgroundColor : droneColor }} className={`${classNames.Icon} ${classNames.DroneIcon}`}></span>\r\n                        <span className={classNames.DroneSelectionWrapper}>\r\n                            {this.renderDroneSelect()}\r\n                        </span>\r\n                    </span>\r\n                    <span className={classNames.HeaderItem}>\r\n                        <span className={classNames.LongLatWrapper}>\r\n                            <span className={classNames.MissionWrapper}>\r\n                                <span className={classNames.lonLatLabel}>Mission:</span>\r\n                            </span>\r\n                            <span className={classNames.MissionValueWrapper}>\r\n                                <span className={classNames.MissionValue}>{this.props.missionState}</span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                    <span className={classNames.HeaderItem}>\r\n                        <span className={`${classNames.Icon} ${classNames.PositionIcon}`}></span>\r\n                        <span className={classNames.LongLatWrapper}>\r\n                            <span>\r\n                                <span className={classNames.lonLatLabel}>X:</span>\r\n                                <span className={classNames.lonLatValue}>{coordinateWithOffset ? this.formatPosition(coordinateWithOffset.x) : \"N/A\"}</span>\r\n                            </span>\r\n                            <span>\r\n                                <span className={classNames.lonLatLabel}>Y:</span>\r\n                                <span className={classNames.lonLatValue}>{coordinateWithOffset ? this.formatPosition(coordinateWithOffset.y) : \"N/A\"}</span>\r\n                            </span>\r\n                            <span>\r\n                                <span className={classNames.lonLatLabel}>Z:</span>\r\n                                <span className={classNames.lonLatValue}>{coordinateWithOffset ? this.formatPosition(coordinateWithOffset.z) : \"N/A\"}</span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                    <span className={classNames.HeaderItem}>\r\n                        <span className={`${classNames.Icon} ${classNames.CompassIcon}`}></span>\r\n                        <span className={classNames.LongLatWrapper}>\r\n                            <span>\r\n                                <span className={classNames.lonLatLabel}>X:</span>\r\n                                <span className={classNames.lonLatValue}>{droneOffset ? droneOffset.x : \"N/A\"}</span>\r\n                            </span>\r\n                            <span>\r\n                                <span className={classNames.lonLatLabel}>Y:</span>\r\n                                <span className={classNames.lonLatValue}>{droneOffset ? droneOffset.y : \"N/A\"}</span>\r\n                            </span>\r\n                            <span>\r\n                                <span className={classNames.lonLatLabel}>Z:</span>\r\n                                <span className={classNames.lonLatValue}>{droneOffset ? droneOffset.z : \"N/A\"}</span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                    <span className={classNames.HeaderItem}><span className={`${classNames.Icon} ${classNames.WifiIcon}`}></span></span>\r\n                    <span className={classNames.HeaderItem}>\r\n                        <span className={`${classNames.Icon} ${classNames.BatteryIcon}`}></span>\r\n                        <span className={classNames.BatteryValue}>59%</span>\r\n                    </span>\r\n                    <div className={classNames.HeaderItem}>{this.getClock()}</div>\r\n                    <button className={classNames.MenuBtn}\r\n                        onClick={this.props.dronesPositions[this.props.selectedDrone] &&\r\n                            this.props.dronesPositions[this.props.selectedDrone].workingOrigin ?\r\n                            this.props.toggleMissionPlannerScreen :\r\n                            () => alert(\"Need to select working origin first.\")}>\r\n                        <span className={`${classNames.Icon} ${classNames.MissionPlannerIcon}`}></span>\r\n                    </button>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    //  onMoreActionsClick = (e) => {\r\n    //      e.preventDefault();\r\n    //      e.stopPropagation();\r\n\r\n    //      const menuItemsList = [\r\n    //          {\r\n    //              name: \"Mission Planner Page\",\r\n    //              func: this.props.showMissionPlannerScreen,\r\n    //              iconCss: \"MissionPlannerIcon\"\r\n    //          }\r\n    //      ];\r\n\r\n    //      this.props.showContextMenu(e.clientX, e.clientY, menuItemsList);\r\n    //  }\r\n\r\n    render() {\r\n\r\n        if (this.props.isLoading) {\r\n            return <Loader loadingMessage={'initializing...'} />;\r\n        }\r\n\r\n        const plannerHiddenClass = this.props.isMissionPlanScreenHidden ? ` ${classNames.MissionPlannerHidden}` : '';\r\n\r\n        return (\r\n            <div className={classNames.App}>\r\n                <GlobalMessage />\r\n                {this.props.popupDetails ? <Popup popupDetails={this.props.popupDetails} /> : null}\r\n                {this.props.contextMenu ? <ContextMenu contextMenu={this.props.contextMenu} /> : null}\r\n                {this.getGeneralErrorPopup()}\r\n                {this.getMainHeader()}\r\n                <Main isMissionPlanScreenHidden={this.props.isMissionPlanScreenHidden} />\r\n                <div className={`${classNames.MissionPlannerOverlay}${plannerHiddenClass}`}>\r\n                    <MissionPlanner />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contextMenu: state.layout.contextMenu,\r\n        popupDetails: state.layout.popupDetails,\r\n        missionState: state.output.missionState || 'N/A',\r\n        isMissionPlanScreenHidden: state.layout.isMissionPlanScreenHidden,\r\n        dronesPositions: state.map.dronesPositions,\r\n        selectedDrone: state.map.selectedDrone\r\n    }\r\n};\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n    return {\r\n        setMapCoreSDKLoadedFlag: () => dispatch({ type: actionTypes.SET_MAPCORE_SDK_LOADED_FLAG }),\r\n        setMapToShow: groupNode => dispatch({ type: actionTypes.SET_MAP_TO_SHOW, payload: groupNode }),\r\n        showContextMenu: (x, y, items) => dispatch({ type: actionTypes.SHOW_CONTEXT_MENU, payload: { x, y, items } }),\r\n        toggleMissionPlannerScreen: () => dispatch({ type: actionTypes.TOGGLE_MISSION_PLANNER_SCREEN }),\r\n        selectDrone: (droneNumber) => dispatch({ type: actionTypes.SELECT_DRONE, payload: { droneNumber } }),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(App));\r\n\r\n//export default connect(mapStateToProps, mapDispachToProps)(App);\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\rosWebsocket.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\config.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\ExternalConfigurationHandler.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\interceptor.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\LoaderAlt\\LoaderAlt.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\index.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Clock\\Clock.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Popup\\Popup.js",["213","214"],"import React, { PureComponent } from 'react';\nimport cn from './Popup.module.css';\nimport closeImg from '../../assets/images/close.svg';\nimport PopupChildren from './PopupChildren';\nimport { connect } from 'react-redux';\nimport actionTypes from '../../store/actions/actionTypes';\n\nclass Popup extends PureComponent {\n    EscKey = 27;\n    EnterKey = 13;\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (e) => {\n        if (e.keyCode === this.EscKey) {\n            this.closePopup();\n        } else if ((e.keyCode === this.EnterKey) && this.props.popupDetails.primayButton && this.props.popupDetails.primayButton.callback) {\n            this.props.popupDetails.primayButton.callback();\n            this.closePopup();\n        }\n    }\n\n    closePopup = () => {\n        if (this.props.popupDetails && this.props.popupDetails.onCloseButtonClick) {\n            this.props.popupDetails.onCloseButtonClick();\n        }\n        this.props.hidePopup();\n    }\n\n    onCloseBtnClick = e => {\n        e.preventDefault();\n        this.closePopup()\n    }\n\n    getXBtn() {\n        return (\n            this.props.hideXButton ? null :\n                <a className={cn.Close} href=\"#\" onClick={this.onCloseBtnClick}>\n                    <img className={cn.closeBtn} src={closeImg} />\n                </a>\n        );\n    }\n    closePopup() {\n        if (this.props.popupDetails && this.props.popupDetails.onCloseButtonClick) {\n            this.props.popupDetails.onCloseButtonClick();\n        }\n        this.props.hidePopup();\n    }\n\n    onPrimaryBtnClick = e => {\n        e.preventDefault();\n        if (this.props.popupDetails.primayButton && this.props.popupDetails.primayButton.callback) {\n            this.props.popupDetails.primayButton.callback();\n        }\n        this.closePopup();\n    }\n\n    onSecondaryBtnClick = e => {\n        e.preventDefault();\n        if (this.props.popupDetails.secondaryButton && this.props.popupDetails.secondaryButton.callback) {\n            this.props.popupDetails.secondaryButton.callback();\n        }\n        this.closePopup();\n    }\n\n    renderButtons() {\n        //default primary button in case no other button was injected as props\n        let primaryButton = <button type=\"button\" className={`${cn.Btn} ${cn.BtnPrimary}`} onClick={this.onPrimaryBtnClick}>Close</button>;\n        let secondaryButton = null;\n        const popupDetails = this.props.popupDetails;\n\n        if (popupDetails.primayButton) {\n            let disabled = popupDetails.primayButton.disabled;\n            primaryButton =\n                <button type=\"button\"\n                    className={`${cn.FormButton} ${cn.Apply} ${disabled ? cn.Disabled : \"\"}`}\n                    onClick={disabled ? undefined : this.onPrimaryBtnClick}>\n                    {popupDetails.primayButton.title}\n                </button>;\n        }\n\n        if (popupDetails.secondaryButton) {\n            let disabled = popupDetails.secondaryButton.disabled;\n            secondaryButton =\n                <button type=\"button\"\n                    className={`${cn.FormButton}   ${disabled ? cn.Disabled : \"\"}`}\n                    onClick={disabled ? undefined : this.onSecondaryBtnClick}>\n                    {popupDetails.secondaryButton.title}\n                </button>\n        }\n\n        return (\n            <>\n                {secondaryButton}\n                {primaryButton}\n            </>\n        )\n    }\n\n    getFooter() {\n        return (\n\n            <div className={cn.PopupFooter}>\n                <div>\n                    {this.renderButtons()}\n                </div>\n            </div>\n        );\n    }\n\n    getHeader() {\n        return (\n            <div className={cn.PopupHeader}>\n                <div className={cn.PopupHeaderWrapper}>\n                    <h2 className={cn.h2}>{this.props.popupDetails.title}</h2>\n                    {this.getXBtn()}\n                </div>\n            </div>\n        );\n    }\n\n    renderChild() {\n        const Child = PopupChildren[this.props.popupDetails.modalChild];\n        return <Child {...this.props.popupDetails.modalChildProps} />;\n    }\n\n    getBody() {\n        const noBodyOverflowClass = this.props.noBodyOverflow ? cn.NoBodyOverFlow : '';\n\n        const body =\n            <div className={`${cn.PopupBody} ${noBodyOverflowClass}`}>\n                {this.props.popupDetails.modalChild ? this.renderChild() : null}\n            </div>;\n        return body;\n    }\n\n    render() {\n        if (!this.props.popupDetails) return null;\n        let visibility = this.props.isPointSelectionMode ? { visibility: \"hidden\" } : {};\n        const size = this.props.popupDetails.size ? cn[this.props.popupDetails.size] : '';\n        return (\n            <div className={cn.Overlay} >\n                <div className={`${cn.Popup} ${size}`} style={visibility}>\n                    {this.getHeader()}\n                    {this.getBody()}\n                    {this.getFooter()}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isPointSelectionMode: state.layout.isPointSelectionMode\n    }\n};\n\nconst mapDispachToProps = dispatch => {\n    return {\n        hidePopup: () => dispatch({ type: actionTypes.HIDE_POPUP })\n\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispachToProps\n)(Popup)","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Error\\Error.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\GlobalMessage\\GlobalMessage.js",["215"],"import React,{ PureComponent } from 'react';\r\nimport classNames from './GlobalMessage.module.css';\r\nimport infoIcon from '../../assets/images/infoFull.svg';\r\nimport successIcon from '../../assets/images/success.svg';\r\nimport errorIcon from '../../assets/images/errorIcon.svg';\r\nimport warnIcon from '../../assets/images/warnIcon.svg';\r\nimport { connect } from 'react-redux';\r\nimport { logSeverities } from '../../config';\r\n\r\nclass GlobalMessage extends PureComponent {    \r\n    \r\n    renderIcon() {\r\n        let icon;\r\n        switch (this.props.appGlobalMessage.type) {\r\n            case logSeverities.info:\r\n                icon = infoIcon;\r\n                break;\r\n            case logSeverities.success:\r\n                icon = successIcon;\r\n                break;\r\n            case logSeverities.warn:\r\n                icon = warnIcon;\r\n                break;\r\n            case logSeverities.error:\r\n                icon = errorIcon;\r\n                break;        \r\n            default:\r\n                icon = infoIcon;\r\n                break;\r\n        }\r\n        return <img className={classNames.Icon} src={icon}></img>\r\n    }\r\n    renderText(text) {\r\n        return <div className={classNames.Text}>{text}</div>\r\n    }\r\n\r\n    renderNotification(notification) {\r\n        const missionPlannerOpenClass = this.props.isMissionPlanScreenHidden ? '' : ` ${classNames.MissionPlannerOpen}`;\r\n\r\n        return (\r\n            <div className={`${classNames.Wrapper}${missionPlannerOpenClass}`}>\r\n                {this.renderIcon()}\r\n                {this.renderText(notification.text)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {      \r\n        const {appGlobalMessage} = this.props;\r\n        return appGlobalMessage && appGlobalMessage.text ? this.renderNotification(appGlobalMessage) : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        appGlobalMessage: state.layout.appGlobalMessage,\r\n        isMissionPlanScreenHidden: state.layout.isMissionPlanScreenHidden\r\n    };\r\n};\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n    return {\r\n        \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(GlobalMessage);","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\ContextMenu\\ContextMenu.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Main\\Main.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\MissionPlanner.js",["216","217"],"import React, { Component } from 'react'\r\nimport cn from './MissionPlanner.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actionTypes from '../../store/actions/actionTypes';\r\nimport actions from '../../store/actions';\r\nimport MissionPlanStages from './MissionPlanStages/MissionPlanStages';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { logSeverities } from '../../config';\r\nimport { viewerStates } from '../../store/reducers/plannerReducer';\r\nimport * as geoCalculations from '../../utils/geoCalculations';\r\n\r\nclass MissionPlanner extends Component {\r\n\r\n    inputRef = React.createRef();\r\n\r\n    addMissionPlanStageFormPopupOkBtnClick = () => {\r\n        const addStageState = this.getAddMissionPlanStageFormState();\r\n        if (addStageState && addStageState.selectedStageType) {\r\n            this.props.addNewStage(addStageState)\r\n        }\r\n    }\r\n\r\n    onStartNewMissionClick = () => {\r\n        const popupDetails = {\r\n            title: 'Add First Stage',\r\n            modalChild: 'AddMissionPlanStageForm',\r\n            modalChildProps: {\r\n                size: 'small',\r\n                onPopupInitalLoad: getChildState => this.getAddMissionPlanStageFormState = getChildState,\r\n                selectPointFromMap: this.props.togglePointSelectionMode,\r\n                getDronePosition:  this.props.dronesPositions[this.props.selectedDrone] &&  this.props.dronesPositions[this.props.selectedDrone].offset ? this.getDronePosition : undefined\r\n            },\r\n            onCloseButtonClick: () => {\r\n            },\r\n            primayButton: {\r\n                title: 'Add',\r\n                disabled: false,\r\n                callback: this.addMissionPlanStageFormPopupOkBtnClick\r\n            },\r\n            secondaryButton: {\r\n                title: 'Cancel',\r\n                callback: () => { }\r\n            }\r\n        };\r\n        this.props.showPopup(popupDetails);\r\n    }\r\n\r\n    renderStartNewMissionButton() {\r\n        return (\r\n            <button className={cn.StartNewBtn} onClick={this.onStartNewMissionClick}>Start New Mission Plan</button>\r\n        )\r\n    }\r\n\r\n\r\n    getDronePosition = () => {\r\n        const dronePosition = this.props.dronesPositions[this.props.selectedDrone];\r\n        let coordinateWithOffset = null;\r\n        if(dronePosition && dronePosition.offset){\r\n            coordinateWithOffset = geoCalculations.getMapCoordinate(dronePosition.workingOrigin , dronePosition.offset);\r\n            this.props.setPositionToPopup(coordinateWithOffset);\r\n        }\r\n    }\r\n\r\n    renderMissionPlanStages() {\r\n\r\n\r\n        const { viewerState, draftMissionStages, savedMissionPlan } = this.props;\r\n        if (viewerState === viewerStates.draft) {\r\n            return (\r\n                draftMissionStages.length ?\r\n                    <MissionPlanStages\r\n                        missionStages={viewerState === viewerStates.draft ? draftMissionStages : savedMissionPlan}\r\n                        isReadOnly={viewerState === viewerStates.savedMission}\r\n                    /> :\r\n                    this.renderStartNewMissionButton()\r\n            )\r\n        } else {\r\n            // saved mission plan flow\r\n            return (\r\n                savedMissionPlan.length > 0 ?\r\n                    <MissionPlanStages\r\n                        missionStages={viewerState === viewerStates.draft ? draftMissionStages : savedMissionPlan}\r\n                        isReadOnly={viewerState === viewerStates.savedMission}\r\n                    /> :\r\n                    <div className={cn.EmptyPlanStagesMessage}>\r\n                        No Saved Plan in Memory\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    onBackBtnClick = () => {\r\n        this.props.toggleMissionPlannerScreen();\r\n    }\r\n\r\n    onSaveBtnClick = () => {\r\n        this.props.saveMissionPlan();\r\n        this.props.toggleViewerState();\r\n        this.props.showGlobalMessage('Draft Successfuly Saved');\r\n    }\r\n\r\n    onClearDraftBtnClick = () => {\r\n        this.props.removeDraftPlan();\r\n    }\r\n\r\n    onRemoveSavedPlanBtnClick = () => {\r\n        this.props.removeSavedPlan();\r\n        this.props.showGlobalMessage('Mission Plan Successfuly Removed');\r\n    }\r\n\r\n    onLoadMissionFromDroneBtnClick = () => {\r\n        this.props.importMissionFromDroneFile();\r\n    }\r\n\r\n    onLoadMissionFromPcBtnClick = () => {\r\n        this.inputRef.current.click();\r\n\r\n    }\r\n\r\n    parseConfigurationFile = (e) => {\r\n        const fileReader = new FileReader();\r\n        if (e.target.files && e.target.files[0]) {\r\n            console.log(\"Reading file: \" + e.target.files[0]);\r\n            fileReader.readAsText(e.target.files[0], \"UTF-8\");\r\n            fileReader.onload = e => {\r\n                const missionData = JSON.parse(e.target.result);\r\n                this.props.importMissionFromPcFile(missionData);\r\n            };\r\n            fileReader.onerror = e => {\r\n                console.log(\"parseConfigurationFile: error reading file\");\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    onExportMissionBtnClick = () => {\r\n        const { draftMissionStages, savedMissionPlan, viewerState } = this.props;\r\n        const plan = viewerState === viewerStates.draft ? draftMissionStages : savedMissionPlan;\r\n        this.props.exportPlanToFile(plan, viewerState);\r\n    }\r\n\r\n\r\n    onLoadMissionBtnClick = e => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const menuItemsList = [\r\n            {\r\n                name: \"Load From PC\",\r\n                func: this.onLoadMissionFromPcBtnClick,\r\n                iconCss: \"PcIcon\"\r\n            },\r\n            {\r\n                name: \"Load From Drone\",\r\n                func: this.onLoadMissionFromDroneBtnClick,\r\n                iconCss: \"DroneIcon\"\r\n            },\r\n        ];\r\n\r\n        this.props.showContextMenu(e.clientX, e.clientY, { side: 'left' }, menuItemsList);\r\n    }\r\n\r\n\r\n    renderDraftButtons(draftMissionStages) {\r\n        const buttons = [];\r\n\r\n        if (draftMissionStages.length > 0) {\r\n            buttons.push(<button title='Save Plan' className={`${cn.SideBarBtn} ${cn.Save}`} onClick={this.onSaveBtnClick} />)\r\n            buttons.push(<button title='Clear Draft Stages' className={`${cn.SideBarBtn} ${cn.ClearStages}`} onClick={this.onClearDraftBtnClick} />)\r\n            buttons.push(<button title='Download Draft' className={`${cn.SideBarBtn} ${cn.Export}`} onClick={this.onExportMissionBtnClick} />)\r\n        }\r\n        buttons.push(<button title='Load Mission Plan' className={`${cn.SideBarBtn} ${cn.Import}`} onClick={e => this.onLoadMissionBtnClick(e)} />)\r\n\r\n        return buttons;\r\n    }\r\n\r\n    renderSavedPlanButtons(savedMissionPlan) {\r\n        const buttons = [];\r\n\r\n        if (savedMissionPlan.length > 0) {\r\n            buttons.push(<button title='Remove Saved Plan' className={`${cn.SideBarBtn} ${cn.Remove}`} onClick={this.onRemoveSavedPlanBtnClick} />)\r\n            buttons.push(<button title='Download Saved Plan' className={`${cn.SideBarBtn} ${cn.Export}`} onClick={this.onExportMissionBtnClick} />)\r\n        }\r\n        buttons.push(<button title='Load Mission Plan From File' className={`${cn.SideBarBtn} ${cn.Import}`} onClick={this.onLoadMissionBtnClick} />)\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    renderSideBar() {\r\n        const { draftMissionStages, savedMissionPlan, viewerState } = this.props;\r\n        let buttons = [<button title='Back to Main' className={`${cn.SideBarBtn} ${cn.ClosePlanner}`} onClick={this.onBackBtnClick} />];\r\n        ;\r\n        if (viewerState === viewerStates.draft) {\r\n            buttons.push(...this.renderDraftButtons(draftMissionStages));\r\n        } else {\r\n            buttons.push(...this.renderSavedPlanButtons(savedMissionPlan));\r\n        }\r\n\r\n        return (\r\n            <div className={cn.SideBar}>\r\n                <div className={cn.SideBarButtons}>\r\n                    {buttons}\r\n                </div>\r\n                <span className={cn.SidebarLabel}>Mission Planner</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onSwitchViewStateClick = e => {\r\n        e.preventDefault();\r\n        this.props.toggleViewerState();\r\n    }\r\n\r\n    getSwithBtnTitle(viewerState) {\r\n        return `View ${viewerState === viewerStates.draft ? 'Saved Mission' : 'Draft Mission'}`;\r\n    }\r\n\r\n    renderHeader() {\r\n        const { viewerState } = this.props;\r\n        const icon = viewerState === viewerStates.draft ? ` ${cn.DraftIcon}` : ` ${cn.SavedPlanIcon}`\r\n        return (\r\n            <div className={cn.Header}>\r\n                <span></span>\r\n                <span className={cn.HeaderTextWrapper}>\r\n                    <span className={cn.HeaderTextState}>{viewerState === viewerStates.draft ? 'Mission Draft' : 'Saved Mission'}</span>\r\n                    <a href={'#'} className={cn.HeaderBtnWrapper} onClick={this.onSwitchViewStateClick} title={this.getSwithBtnTitle(viewerState)}>\r\n                        <span className={cn.HeaderBtn}></span>\r\n                    </a>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        const centerClass = !this.props.draftMissionStages.length ? cn.Center : '';\r\n        return (\r\n            <>\r\n                {this.renderSideBar()}\r\n                <div className={`${cn.Wrapper} ${centerClass}`}>\r\n                    {this.renderHeader()}\r\n                    {this.renderMissionPlanStages()}\r\n                </div>\r\n                <input type=\"file\" style={{ display: 'none' }} accept={\"application/json\"} ref={this.inputRef} onChange={(e) => this.parseConfigurationFile(e)} />\r\n            </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        draftMissionStages: state.planner.draftMissionStages,\r\n        savedMissionPlan: state.planner.savedMissionPlan,\r\n        viewerState: state.planner.viewerState,\r\n        dronesPositions: state.map.dronesPositions,\r\n        selectedDrone: state.map.selectedDrone\r\n    }\r\n};\r\n\r\nconst mapDispachToProps = dispatch => {\r\n    return {\r\n        showPopup: details => dispatch({ type: actionTypes.SHOW_POPUP, payload: details }),\r\n        showGlobalMessage: text => dispatch(actions.showGlobalMessage({ text, type: logSeverities.success, isRemoved: true })),\r\n        addNewStage: stage => dispatch({ type: actionTypes.ADD_NEW_MISSION_PLAN_STAGE, payload: stage }),\r\n        toggleMissionPlannerScreen: () => dispatch({ type: actionTypes.TOGGLE_MISSION_PLANNER_SCREEN }),\r\n        saveMissionPlan: () => dispatch({ type: actionTypes.SAVE_MISSION_PLAN }),\r\n        removeDraftPlan: () => dispatch({ type: actionTypes.REMOVE_DRAFT_MISSION_PLAN }),\r\n        removeSavedPlan: () => dispatch({ type: actionTypes.REMOVE_SAVED_MISSION_PLAN }),\r\n        toggleViewerState: () => dispatch({ type: actionTypes.TOGGLE_MISSION_PLAN_VIEWER_STATE }),\r\n        importMissionFromDroneFile: () => dispatch(actions.importMissionFromDroneFile()),\r\n        importMissionFromPcFile: (missionData) => dispatch(actions.importMissionFromPcFile(missionData)),\r\n        exportPlanToFile: (plan, viewerState) => dispatch(actions.exportPlanToFile(plan, viewerState)),\r\n        togglePointSelectionMode: () => dispatch({ type: actionTypes.TOGGLE_POINT_SELECTION_MODE }),\r\n        showContextMenu: (x, y, options, items) => dispatch({ type: actionTypes.SHOW_CONTEXT_MENU, payload: { x, y, options, items } }),\r\n        setPositionToPopup: (position) => dispatch({ type: actionTypes.SELECT_POINT_FROM_MAP, payload: { position } }),\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(MissionPlanner));\r\n\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     mapDispachToProps\r\n// )(MissionPlanner)\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\utils\\geoCalculations.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Select\\Select.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\index.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\videoReducer.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\mapReducer.js",["218"],"import actionTypes from '../actions/actionTypes';\r\nimport * as geoCalculations from '../../utils/geoCalculations';\r\nimport externalConfig from '../../ExternalConfigurationHandler';\r\nimport config from '../../config';\r\nconst initialState = {\r\n    isMapCoreSDKLoaded: false,\r\n    mapToShow: null,\r\n    enemyPositionOffset: null,\r\n    dronesPositions: {},\r\n    selectedDrone: null\r\n};\r\n\r\nconst mapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_MAPCORE_SDK_LOADED_FLAG:\r\n            return {\r\n                ...state,\r\n                isMapCoreSDKLoaded: true\r\n            }\r\n        case actionTypes.SET_MAP_TO_SHOW:\r\n            return {\r\n                ...state,\r\n                mapToShow: action.payload\r\n            }\r\n        case actionTypes.GET_DRONE_POSITION_OFFSET: {\r\n            let dronePosition = { ...state.dronesPositions[action.payload.droneNumber] };\r\n            dronePosition.angle = geoCalculations.quaternionToYaw(action.payload.droneRotationQuaternion);\r\n            dronePosition.offset = action.payload.dronePositionOffset;\r\n            return {\r\n                ...state,\r\n                dronesPositions: {\r\n                    ...state.dronesPositions,\r\n                    [action.payload.droneNumber]: dronePosition\r\n                },\r\n            }\r\n        }\r\n        case actionTypes.GET_ENEMY_POSITION: {\r\n            let enemyOffset = action.payload.enemyOffset;\r\n            let droneNumber = action.payload.droneNumber;\r\n            //   const droneAngleRadians = (360 - state.dronesPositions[droneNumber].angle) * Math.PI / 180;\r\n\r\n            //  let enemyOffsetFromDrone = {\r\n            //      x: range * Math.cos(droneAngleRadians) ,\r\n            //      y: range * Math.sin(droneAngleRadians) ,\r\n            //      z: 0\r\n            //  }\r\n            //  let enemyOffset = geoCalculations.addCoordinates(state.dronesPositions[droneNumber].offset, enemyOffsetFromDrone);\r\n\r\n            let dronePosition = { ...state.dronesPositions[droneNumber] };\r\n\r\n            if (dronePosition.enemyOffsets &&\r\n                dronePosition.enemyOffsets.some(offset => {\r\n                    return (geoCalculations.calculateDistanceBetween2Points(offset, enemyOffset, true) < externalConfig.getConfiguration().MIN_ENEMY_RADIUS);\r\n                })) {\r\n                //enemy already exists in this radius\r\n                return state;\r\n            }\r\n            dronePosition.enemyOffsets = dronePosition.enemyOffsets ? [...dronePosition.enemyOffsets, enemyOffset] : [enemyOffset];\r\n\r\n            return {\r\n                ...state,\r\n                dronesPositions: {\r\n                    ...state.dronesPositions,\r\n                    [droneNumber]: dronePosition\r\n                },\r\n            }\r\n        }\r\n        case actionTypes.SELECT_DRONE: {\r\n            return {\r\n                ...state,\r\n                selectedDrone: action.payload.droneNumber\r\n            }\r\n        }\r\n        case actionTypes.DELETE_DRONE_POSITION: {\r\n            return {\r\n                ...state,\r\n                dronesPositions: {\r\n                    ...state.dronesPositions,\r\n                    [state.selectedDrone]: null\r\n                },\r\n            }\r\n        }\r\n        case actionTypes.SAVE_ORIGIN_COORDINATE: {\r\n            let droneData = { ...state.dronesPositions[state.selectedDrone] };\r\n            droneData.workingOrigin = {\r\n                coordinate: action.payload.coordinate,\r\n                angle: action.payload.angle\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                dronesPositions: {\r\n                    ...state.dronesPositions,\r\n                    [state.selectedDrone]: droneData\r\n                },\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default mapReducer;","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\outputReducer.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\layoutReducer.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\reducers\\plannerReducer.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Popup\\PopupChildren.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Select\\reactSelectStyles.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\Video\\Video.js",["219","220"],"import React, { Component } from 'react';\r\nimport cn from './Video.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../store/actions';\r\nimport actionTypes from '../../store/actions/actionTypes';\r\nimport externalConfig from '../../ExternalConfigurationHandler';\r\nimport config, { devVideoSnapshotUrl, devVideoStreamUrl } from '../../config';\r\nimport targetIcon from '../../assets/images/target.svg';\r\nimport Slider from '../controls/Slider/Slider';\r\nimport {appUiElements} from '../../store/reducers/layoutReducer';\r\n\r\nclass Video extends Component {\r\n\r\n    state = {\r\n        isImageLoadingError: false,\r\n        isImageLoading: true,\r\n        isFullScreen: false,\r\n        targetPosition: null,\r\n        showTarget: true,\r\n        showExposure: false,\r\n        isRecording: false,\r\n        randomKey: Math.random()\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        //window.addEventListener('resize', this.setTargetPosition)\r\n    }\r\n\r\n    getVideoSrc() {\r\n        console.log(\"render video\", this.props.selectedDrone);\r\n        const { DRONES_DATA } = externalConfig.getConfiguration();\r\n        const ip = `//${DRONES_DATA.segment}.${this.props.selectedDrone}:${DRONES_DATA.port}`;\r\n        const snapshotUrl = `${ip}${config.urls.videoSnapshot}`;\r\n        const streamUrl = `${ip}${config.urls.videoStream}`;\r\n\r\n        if (this.props.isPaused) {\r\n            return process.env.NODE_ENV === 'developments' ? devVideoSnapshotUrl : snapshotUrl;\r\n        } else {\r\n            return process.env.NODE_ENV === 'developments' ? devVideoStreamUrl : streamUrl;\r\n        }\r\n    }\r\n\r\n    onVideoError = (e) => {\r\n        console.log('error when trying to load camera video', e);\r\n        this.setState({\r\n            isImageLoadingError: true\r\n        })\r\n    }\r\n\r\n    setTargetPosition = () => {\r\n        const img = document.getElementById('droneImage');\r\n        if (!img) return;\r\n        const rect = img.getBoundingClientRect();\r\n        if (!rect) return;\r\n\r\n        this.setState({\r\n            targetPosition: {\r\n                top: rect.top + (rect.height / 2),\r\n                left: rect.left + (rect.width / 2)\r\n            }\r\n        })\r\n    }\r\n\r\n    onVideoLoaded = e => {\r\n        //this.setTargetPosition();\r\n        this.setState({\r\n            isImageLoading: false\r\n        })\r\n    }\r\n\r\n    onPauseOrPlayClick = e => {\r\n        e.stopPropagation();\r\n        this.props.isPaused ? this.props.resume() : this.props.pause()\r\n    }\r\n\r\n    onFullScreenClick = () => {\r\n        //const elem = document.querySelector('#droneImage');\r\n        const elem = document.querySelector('#videoWrapper');\r\n        if (elem.requestFullscreen) {\r\n            elem.requestFullscreen();\r\n        } else if (elem.webkitRequestFullscreen) { /* Safari */\r\n            elem.webkitRequestFullscreen();\r\n        } else if (elem.msRequestFullscreen) { /* IE11 */\r\n            elem.msRequestFullscreen();\r\n        }\r\n        this.setState({ isFullScreen: true })\r\n    }\r\n\r\n    onExitFullScreenClick = () => {\r\n        // bug when we are in full screen and click on ESC key\r\n        if (document.fullscreenElement === null) {\r\n            this.onFullScreenClick();\r\n        } else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            } else if (document.webkitExitFullscreen) { /* Safari */\r\n                document.webkitExitFullscreen();\r\n            } else if (document.msExitFullscreen) { /* IE11 */\r\n                document.msExitFullscreen();\r\n            }\r\n            this.setState({ isFullScreen: false })\r\n        }\r\n    }\r\n\r\n    getPlayOrPauseButton() {\r\n        return this.props.isPaused ? cn.Play : cn.Pause\r\n    }\r\n\r\n    getPlayOrPauseTitle() {\r\n        return this.props.isPaused ? 'Play' : 'Pause'\r\n    }\r\n\r\n    getRecordButton = () => {\r\n        return this.state.isRecording ? cn.RecordindIcon : cn.RecordIcon\r\n    }\r\n\r\n    getRecordTitle = () => {\r\n        return this.state.isRecording ? 'Recording' : 'Start Recording'\r\n    }\r\n\r\n    renderVideoHeader() {\r\n        const hideTargetClass = this.state.showTarget ? '' : cn.HideTarget;\r\n        return (\r\n            <div className={`${cn.VideoHeader}`}>\r\n                <div className={cn.Description}>\r\n                    {this.props.isPaused ? 'Video paused' :\r\n                        <span className={cn.StreamingIconWrapper}>Video Feed<span className={cn.StreamingIcon} /></span>\r\n                    }\r\n                </div>\r\n                <span className={`${cn.Exposure}`}\r\n                    onClick={() => this.setState({ showExposure: !this.state.showExposure })}>\r\n                </span>\r\n                {this.props.weaponDetected && <span className={`${cn.ToggleTarget} ${hideTargetClass}`}\r\n                    onClick={() => this.setState({ showTarget: !this.state.showTarget })}>\r\n                </span>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderVideoFooter() {\r\n        return (\r\n            <>\r\n                <button\r\n                    onClick={this.onPauseOrPlayClick}\r\n                    title={this.getPlayOrPauseTitle()}\r\n                    className={`${cn.ControlBtn} ${this.getPlayOrPauseButton()}`}>\r\n                </button>\r\n                <button\r\n                    onClick={() => this.setState({ isRecording: !this.state.isRecording })}\r\n                    title={this.getRecordTitle()}\r\n                    className={`${cn.ControlBtn} ${cn.RecordButton}`}>\r\n                    <span className={`${this.getRecordButton()}`} />\r\n                </button>\r\n                <button\r\n                    onClick={this.state.isFullScreen ? this.onExitFullScreenClick : this.onFullScreenClick}\r\n                    title={this.state.isFullScreen ? 'Exit Full Screen' : 'Full Screen'}\r\n                    className={`${cn.ControlBtn} ${this.state.isFullScreen ? cn.ExitFullScreen : cn.FullScreen}`}>\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    updateExposure(sliderOffset) {\r\n        const exposureValue = config.EXPOSURE_MAX_LEVEL * (100 - sliderOffset) / 100;\r\n        console.log(\"new exposureValue is \", exposureValue);\r\n        this.setState({ sliderOffset });\r\n        this.props.setExposure(exposureValue)\r\n    }\r\n\r\n    renderImgElement() {\r\n\r\n        if (this.state.isImageLoadingError) {\r\n            return (\r\n                <div className={cn.ErrorMessage}><span className={cn.ErrorIcon}></span> Error loading video stream</div>\r\n            )\r\n        }\r\n        const largeTarget = this.state.isFullScreen ? ` ${cn.TargetLarge}` : '';\r\n        return (\r\n            <>\r\n                {this.renderVideoHeader()}\r\n\r\n                {this.state.showTarget && this.props.weaponDetected &&\r\n                    <img className={`${cn.TargetIcon}${largeTarget}`} style={this.state.targetPosition} src={targetIcon} />\r\n                }\r\n\r\n                {this.state.showExposure &&\r\n                    <Slider sliderOffset={this.state.sliderOffset} updatePosition={(offset) => this.updateExposure(offset)} />\r\n                }\r\n\r\n                <img\r\n                    key={this.props.selectedDrone +  this.state.randomKey}\r\n                    crossOrigin=\"anonymous\"\r\n                    onLoad={this.onVideoLoaded}\r\n                    className={cn.VideoImage}\r\n                    src={this.getVideoSrc()}\r\n                    onError={() => setTimeout(() => {\r\n                        this.setState({randomKey :  Math.random()})\r\n                    }, 3000)\r\n                    }\r\n                    id='droneImage'\r\n                    onClick={this.props.pointVideoImage}\r\n                //onTouchStart={this.props.pointVideoImage}\r\n                />\r\n                {this.renderVideoFooter()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const fixedClass = this.props.appPrimaryUiElement === appUiElements.tabs ? cn.Fixed : '';\r\n        const fullHeightClass = this.state.isImageLoadingError || this.state.isImageLoading ? cn.FullHeight : '';\r\n\r\n        return (\r\n            <div className={`${cn.Wrapper} ${fullHeightClass} ${fixedClass}`} id='videoWrapper'>\r\n                {this.renderImgElement()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isPaused: state.video.isPaused,\r\n        weaponDetected: state.output.weaponDetected,\r\n        selectedDrone: state.map.selectedDrone,\r\n        appPrimaryUiElement: state.layout.appPrimaryUiElement\r\n    };\r\n};\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n    return {\r\n        pointVideoImage: e => dispatch(actions.pointVideoImage(e)),\r\n        setExposure: exposureValue => dispatch(actions.setExposure(exposureValue)),\r\n        pause: () => dispatch({ type: actionTypes.PAUSE_VIDEO }),\r\n        resume: () => dispatch({ type: actionTypes.RESUME_VIDEO }),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(Video);\r\n\r\n\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\ActionButtons\\ActionButtons.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\MissionPlanStages\\MissionPlanStages.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\FlightTelemetry\\FlightTelemetry.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\OutputTabs\\OutputTabs.js",["221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, { Component } from 'react'\r\nimport cn from './OutputTabs.module.css'\r\nimport WeaponDetection from '../../assets/images/WeaponDetection.png';\r\nimport externalConfig from '../../ExternalConfigurationHandler';\r\nimport actions from '../../store/actions';\r\nimport config, { devVideoSnapshotUrl, devVideoStreamUrl } from '../../config';\r\nimport { connect } from 'react-redux';\r\nimport EnemySpottedSound from '../../assets/EnemySpotted.mp3';\r\nimport ArmedRed from '../../assets/images/armedRed.svg';\r\nimport rosWebSocket from '../../rosWebsocket';\r\nimport {appUiElements} from '../../store/reducers/layoutReducer';\r\nclass OutputTabs extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pointPosition: null,\r\n            showCapture: true,\r\n            selectedTab: \"WindowDetection\",\r\n            randomKey: Math.random()\r\n        }\r\n        this.EnemySpotted = new Audio(EnemySpottedSound);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.onImageLoaded())\r\n    }\r\n\r\n    onImageLoaded = (e) => {\r\n        if (!this.props.imageSentToDroneData || !this.props.imageSentToDroneData.point) {\r\n            console.log(\"Error, this.props.imageSentToDroneData.point as it is undefined\");\r\n            return;\r\n        }\r\n\r\n        const tabsWrapper = document.getElementById('tabs-wrapper');\r\n\r\n        const img = e.target;\r\n        const xFactor = img.naturalWidth / tabsWrapper.getBoundingClientRect().width;\r\n        const yFactor = img.naturalHeight / tabsWrapper.getBoundingClientRect().height;\r\n        const { roundedX, roundedY } = this.props.imageSentToDroneData.point;\r\n        this.setState({\r\n            pointPosition: {\r\n                top: roundedY / yFactor,\r\n                left: roundedX / xFactor,\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.imageSentToDroneData !== this.props.imageSentToDroneData) {\r\n            const img = document.createElement('img');\r\n            img.onload = this.onImageLoaded;\r\n            img.src = this.props.imageSentToDroneData.image;\r\n            window.addEventListener('resize', () => this.onImageLoaded({ target: img }))\r\n        }\r\n\r\n        if (prevProps.weaponDetected !== this.props.weaponDetected) {\r\n            this.EnemySpotted.play();\r\n            this.onToggleTabClick(\"Skeleton\");\r\n        }\r\n\r\n        if ((prevProps.skeletonRange === 'N/A' && this.props.skeletonRange !== 'N/A') ||\r\n            (!prevProps.indoorExplorationFlag && this.props.indoorExplorationFlag)) {\r\n            this.onToggleTabClick(\"Skeleton\");\r\n        }\r\n\r\n        if(this.state.selectedTab != prevState.selectedTab){\r\n            this.setState({randomKey: Math.random()})\r\n        }\r\n        if (this.props.selectedTab === 'Occupancy' && this.props.selectedDrone !== prevProps.selectedDrone) {\r\n            /*const viewer = new window.ROS2D.Viewer({\r\n                divID: 'occupancyTab',\r\n                width: 600,\r\n                height: 500\r\n            });\r\n            const gridClient =  new window.ROS2D.OccupancyGridClient({\r\n                ros: rosWebSocket.getRosWebsocketObject(this.props.selectedDrone),\r\n                rootObject: viewer.scene\r\n            });\r\n            gridClient.on('change', function () {\r\n                viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\r\n            });*/\r\n        }\r\n    }\r\n\r\n    renderTabs() {\r\n\r\n        let imageElement = null;\r\n        let pointElement = null;\r\n\r\n        const imageDataUrl = this.props.imageSentToDroneData && this.props.imageSentToDroneData.image;\r\n        const point = this.props.imageSentToDroneData && this.props.imageSentToDroneData.point;\r\n        if (imageDataUrl && point) {\r\n            imageElement = <img className={cn.OutputImage} src={imageDataUrl} />\r\n            pointElement = <div className={cn.Point} style={this.state.pointPosition}></div>\r\n        }\r\n        return (<>\r\n            { imageElement}\r\n            { pointElement}\r\n        </>\r\n        );\r\n    }\r\n\r\n    renderNoOutputReceived() {\r\n        return <div className={cn.ErrorMessage}><span className={cn.ErrorIcon}></span> No output has been received yet</div>\r\n    }\r\n\r\n    onToggleTabClick = (selectedTab) => {\r\n        this.setState({ selectedTab });\r\n    }\r\n\r\n    renderTabsToggle = () => {\r\n        const selectedTab = this.state.selectedTab;\r\n        return (<>\r\n            <div className={cn.tabslidernav} >\r\n                <ul className={cn.tabslidertabs} >\r\n                    <li className={`${cn.tabslidertrigger} ${selectedTab == \"Capture\" ? cn.TabSelected : \"\"}`}\r\n                        onClick={() => this.onToggleTabClick(\"Capture\")}>\r\n                        Capture\r\n                    </li>\r\n                    <li className={`${cn.tabslidertrigger} ${selectedTab == \"Skeleton\" ? cn.TabSelected : \"\"}`}\r\n                        onClick={() => this.onToggleTabClick(\"Skeleton\")}>\r\n                        Skeleton\r\n                    </li>\r\n                    <li className={`${cn.tabslidertrigger} ${selectedTab == \"WindowDetection\" ? cn.TabSelected : \"\"}`}\r\n                        onClick={() => this.onToggleTabClick(\"WindowDetection\")}>\r\n                        Window\r\n                    </li>\r\n                    <li className={`${cn.tabslidertrigger} ${selectedTab == \"Occupancy\" ? cn.TabSelected : \"\"}`}\r\n                        onClick={() => this.onToggleTabClick(\"Occupancy\")}>\r\n                        Occupancy\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n        </>)\r\n\r\n    }\r\n\r\n    getCaptureTab() {\r\n        return this.props.imageSentToDroneData ? this.renderTabs() : this.renderNoOutputReceived();\r\n    }\r\n\r\n    getSkeletonRange() {\r\n        if (this.props.skeletonRange && this.props.skeletonRange !== 'N/A') {\r\n            return `${this.props.skeletonRange} m`;\r\n        }\r\n        return this.props.skeletonRange;\r\n    }\r\n\r\n    getSkeletonTab() {\r\n        let weaponDetectedClass = this.props.weaponDetected ? cn.WeaponDetected : undefined;\r\n        return (<div className={`${cn.SkeletonTab} ${weaponDetectedClass}`} >\r\n            <img\r\n                key={\"skeleton\" + this.props.selectedDrone +  this.state.randomKey}\r\n                crossOrigin=\"anonymous\"\r\n                //    onLoad={this.onVideoLoaded}\r\n                onError={() => setTimeout(() => {\r\n                    this.setState({randomKey :  Math.random()})\r\n                }, 3000)\r\n                }\r\n                className={cn.VideoImage}\r\n                src={this.getSkeletonVideoSrc()}\r\n                id='droneImage'\r\n            //    onClick={this.props.pointVideoImage}\r\n            />\r\n            {this.props.weaponDetected && <img className={`${cn.AlertIcon}`} src={ArmedRed} />}\r\n            { this.props.skeletonRange && <span className={`${cn.SkeletonRange}`} > {this.getSkeletonRange()} </span>}\r\n        </div>)\r\n    }\r\n\r\n    getWindowDetectionTab() {\r\n        return (<div className={`${cn.WindowTab}`} >\r\n            <img\r\n                key={\"window\" +this.props.selectedDrone +  this.state.randomKey}\r\n                crossOrigin=\"anonymous\"\r\n                //    onLoad={this.onVideoLoaded}\r\n                onError={() => setTimeout(() => {\r\n                    this.setState({randomKey :  Math.random()})\r\n                }, 3000)\r\n                }\r\n                className={cn.VideoImage}\r\n                src={this.getWindowDetectionVideoSrc()}\r\n                id='droneImage'\r\n            //    onClick={this.props.pointVideoImage}\r\n            />\r\n            <span className={`${cn.AlertIcon}`} />\r\n        </div>)\r\n    }\r\n\r\n    getOccupancyTab() {\r\n        return (<div className={`${cn.WindowTab}`} >\r\n            <img\r\n                key={\"Occupancy\" +this.props.selectedDrone +  this.state.randomKey}\r\n                crossOrigin=\"anonymous\"\r\n                //    onLoad={this.onVideoLoaded}\r\n                onError={() => setTimeout(() => {\r\n                    this.setState({randomKey :  Math.random()})\r\n                }, 3000)\r\n                }\r\n                className={cn.VideoImage}\r\n                src={this.geOccupancyDetectionSrc()}                \r\n            //    onClick={this.props.pointVideoImage}\r\n            />\r\n            <span className={`${cn.AlertIcon}`} />\r\n        </div>)\r\n    }\r\n\r\n    \r\n\r\n    getWindowDetectionVideoSrc() {\r\n        const { DRONES_DATA } = externalConfig.getConfiguration();\r\n        const ip = `//${DRONES_DATA.segment}.${this.props.selectedDrone}:${DRONES_DATA.port}`;\r\n        const snapshotUrl = `${ip}${config.urls.windowDetectionSnapshot}`;\r\n        const streamUrl = `${ip}${config.urls.windowDetectionStream}`;\r\n\r\n        if (this.props.isPaused) {\r\n            return process.env.NODE_ENV === 'developments' ? devVideoSnapshotUrl : snapshotUrl;\r\n        } else {\r\n            return process.env.NODE_ENV === 'developments' ? devVideoStreamUrl : streamUrl;\r\n        }\r\n    }\r\n\r\n    geOccupancyDetectionSrc() {\r\n        const { DRONES_DATA } = externalConfig.getConfiguration();\r\n        const ip = `//${DRONES_DATA.segment}.${this.props.selectedDrone}:${DRONES_DATA.port}`;\r\n//        const snapshotUrl = `${ip}${config.urls.windowDetectionSnapshot}`;\r\n        const streamUrl = `${ip}${config.urls.mapImageStream}`;\r\n        \r\n        return streamUrl;\r\n                    \r\n    }\r\n\r\n    getSkeletonVideoSrc() {\r\n        const { DRONES_DATA } = externalConfig.getConfiguration();\r\n        const ip = `//${DRONES_DATA.segment}.${this.props.selectedDrone}:${DRONES_DATA.port}`;\r\n        const snapshotUrl = `${ip}${config.urls.skeletonSnapshot}`;\r\n        const streamUrl = `${ip}${config.urls.skeletonStream}`;\r\n\r\n        if (this.props.isPaused) {\r\n            return process.env.NODE_ENV === 'developments' ? devVideoSnapshotUrl : snapshotUrl;\r\n        } else {\r\n            return process.env.NODE_ENV === 'developments' ? devVideoStreamUrl : streamUrl;\r\n        }\r\n    }\r\n\r\n    getSelectedTab() {\r\n        switch (this.state.selectedTab) {\r\n            case \"Capture\":\r\n                return this.getCaptureTab();\r\n            case \"Skeleton\":\r\n                return this.getSkeletonTab();\r\n            case \"Occupancy\":\r\n                return this.getOccupancyTab();\r\n            case \"WindowDetection\":\r\n                return this.getWindowDetectionTab();\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const enlargeClass = this.props.appPrimaryUiElement === appUiElements.tabs ? cn.Enlarge : '';\r\n\r\n        return (\r\n            <div className={`${cn.Wrapper} ${enlargeClass}`}>\r\n                {this.renderTabsToggle()}\r\n                <div className={cn.Tabs} id='tabs-wrapper'>\r\n                    {this.getSelectedTab()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tabs: state.video.tabs,\r\n        imageSentToDroneData: state.layout.imageSentToDroneData,\r\n        skeletonRange: state.output.skeletonRange,\r\n        weaponDetected: state.output.weaponDetected,\r\n        indoorExplorationFlag: state.output.indoorExplorationFlag,\r\n        selectedDrone: state.map.selectedDrone,\r\n        appPrimaryUiElement: state.layout.appPrimaryUiElement\r\n    };\r\n};\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(OutputTabs);","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MapContainer\\MapContainer.js",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315"],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\mapActions.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\layoutActions.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\videoActions.js",["316"],"import actionTypes from './actionTypes';\r\nimport { getBase64Image } from '../../utils/imageUtils';\r\nimport { getService } from '../../services';\r\nimport { logSeverities } from '../../config';\r\nimport * as geoCalculations from '../../utils/geoCalculations';\r\nimport { showGlobalMessage } from './layoutActions';\r\n\r\nexport const locate = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.LOACTE_START });\r\n\r\n        const img = document.getElementById('droneImage');\r\n        if (img) {\r\n            const imgURL = getBase64Image(img);\r\n            //dispach img to send and pixel\r\n            dispatch({ type: actionTypes.IMAGE_SENT_TO_DRONE, payload: { image: imgURL } });\r\n\r\n            const dataX = imgURL && imgURL.replace(\"data:image/jpeg;base64,\", \"\");\r\n            if (!dataX) {\r\n                dispatch({ type: actionTypes.LOACTE_FAILED });\r\n                return;\r\n            }\r\n\r\n            const imageMessage = new window.ROSLIB.Message({ data: dataX, format: \"jpeg\" });\r\n            const requestLocate = new window.ROSLIB.ServiceRequest({ image: imageMessage });\r\n\r\n            getService('pointingFingerLocate').callService(requestLocate, result => {\r\n                if (result.isSuccess) {\r\n                    dispatch({ type: actionTypes.LOACTE_SUCCESS });\r\n                } else {\r\n                    dispatch({ type: actionTypes.LOACTE_FAILED });\r\n                }\r\n                console.log(getService('pointingFingerLocate').name, result)\r\n            });\r\n        } else {\r\n            dispatch({ type: actionTypes.LOACTE_FAILED });\r\n        }\r\n    };\r\n};\r\n\r\nexport const pointVideoImage = ev => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.POINT_ON_VIDEO_IMAGE_START });\r\n\r\n        const img = document.getElementById('droneImage');\r\n        // Adjusting pixel to original img sizes\r\n        let adjustedX = (ev.pageX - img.getBoundingClientRect().x) / img.width * img.naturalWidth;\r\n        let adjustedY = (ev.pageY - img.getBoundingClientRect().y) / img.height * img.naturalHeight;\r\n\r\n        console.log(adjustedX, adjustedY);\r\n\r\n        const roundedX = Math.round(adjustedX);\r\n        const roundedY = Math.round(adjustedY);\r\n        dispatch(showGlobalMessage({ text: `selected pixel: (${roundedX}, ${roundedY})`, type: logSeverities.info, isRemoved: true }));\r\n\r\n        if (img) {\r\n            const imgURL = getBase64Image(img);\r\n            //dispach img to send and pixel\r\n            dispatch({ type: actionTypes.IMAGE_SENT_TO_DRONE, payload: { image: imgURL, point: { roundedX, roundedY } } });\r\n\r\n            const dataX = imgURL && imgURL.replace(\"data:image/jpeg;base64,\", \"\");\r\n            if (!dataX) {\r\n                dispatch({ type: actionTypes.POINT_ON_VIDEO_IMAGE_FAILED });\r\n                return;\r\n            }\r\n            const imageMessage = new window.ROSLIB.Message({ data: dataX, format: \"jpeg\" });\r\n\r\n            const pointMessage = new window.ROSLIB.Message({\r\n                x: roundedX,\r\n                y: roundedY,\r\n                z: 0.0\r\n            });\r\n\r\n            const requestEncode = new window.ROSLIB.ServiceRequest({ image: imageMessage, point: pointMessage });\r\n\r\n            getService('pointingFingerEncode').callService(requestEncode, result => {\r\n\r\n                console.log(getService('pointingFingerEncode').name, result);\r\n            });\r\n\r\n            const requestLocate = new window.ROSLIB.ServiceRequest({ image: imageMessage });\r\n\r\n            getService('pointingFingerLocate').callService(requestLocate, result => {\r\n                if (result.isSuccess) {\r\n                    dispatch({ type: actionTypes.POINT_ON_VIDEO_IMAGE_SUCCESS });\r\n                }\r\n                console.log(getService('pointingFingerLocate').name, result);\r\n            });\r\n\r\n        } else {\r\n            dispatch({ type: actionTypes.POINT_ON_VIDEO_IMAGE_FAILED });\r\n        }\r\n    };\r\n};\r\n\r\nexport const reset = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.RESET_START });\r\n\r\n        const requestReset = new window.ROSLIB.ServiceRequest({});\r\n\r\n        getService('pointingFingerReset').callService(requestReset, result => {\r\n            if (result.isSuccess) {\r\n                dispatch({ type: actionTypes.RESET_SUCCESS });\r\n            } else {\r\n                dispatch({ type: actionTypes.RESET_FAILED });\r\n            }\r\n            console.log(getService('pointingFingerReset').name, result)\r\n        });\r\n\r\n        getService('seekerReset').callService(requestReset, function (result) {\r\n            console.log('Result for service call on ' + getService('seekerReset').name + ': ' + result.isSuccess);\r\n            console.log(getService('seekerReset').name, result)\r\n        });\r\n\r\n    };\r\n};\r\n\r\nexport const takeoff = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.TAKE_OFF_START });\r\n        dispatch(showGlobalMessage({ text: `Taking off...`, type: logSeverities.info, isRemoved: true }));\r\n        const requestTakeoff = new window.ROSLIB.ServiceRequest({});\r\n\r\n        getService('seekerTakeoff').callService(requestTakeoff, result => {\r\n            dispatch({ type: actionTypes.TAKE_OFF_SUCCESS });\r\n            /*if (result.isSuccess) {\r\n                dispatch({ type: actionTypes.TAKE_OFF_SUCCESS });\r\n            } else {\r\n                dispatch({ type: actionTypes.TAKE_OFF_FAILED });\r\n                dispatch({ type: actionTypes.SHOW_GLOBAL_MESSAGE, payload: { text: `Taking off failed...`, type: logSeverities.error } });\r\n            }*/\r\n            console.log(result)\r\n        });\r\n    };\r\n};\r\nexport const startIndoorExploration = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.START_INDOOR_EXPLORATION });\r\n        const requestIndoorExplorationFlag = new window.ROSLIB.ServiceRequest({});\r\n\r\n        getService('startIndoorExploration').callService(requestIndoorExplorationFlag, result => {\r\n            console.log(result);\r\n        });\r\n    };\r\n};\r\n\r\nexport const goToLocation = (location) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.GO_TO_LOCATION_START });\r\n        dispatch(showGlobalMessage({ text: `Go To Location ${location}`, type: logSeverities.info, isRemoved: true }));\r\n\r\n        const [x, y, z] = location.split(',');\r\n        const pointMessage = new window.ROSLIB.Message({\r\n            x: parseFloat(x),\r\n            y: parseFloat(y),\r\n            z: parseFloat(z)\r\n        });\r\n\r\n        getService('flyToTopic').publish(pointMessage);\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const setExposure = (exposureVal) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: actionTypes.SET_EXPOSURE_START });\r\n        dispatch(showGlobalMessage({ text: `Setting Exposure...`, type: logSeverities.info, isRemoved: true }));\r\n        const setExposure = new window.ROSLIB.ServiceRequest({\r\n            config: {\r\n                bools: [], strs: [], doubles: [], groups: [],\r\n                ints: [\r\n                    { name: 'exposure', value: exposureVal }\r\n                ],\r\n\r\n            }\r\n        });\r\n\r\n        getService('setExposure').callService(setExposure, result => {\r\n            if (result.isSuccess) {\r\n                dispatch({ type: actionTypes.SET_EXPOSURE_SUCCESS });\r\n            } else {\r\n                //   dispatch({ type: actionTypes.SET_EXPOSURE_FAILED });\r\n                //  dispatch({ type: actionTypes.SHOW_GLOBAL_MESSAGE, payload: { text: `Setting Exposure failed...`, type: logSeverities.error } });\r\n            }\r\n            console.log(result)\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const subscribeToSkeletonRange = (droneNumber) => {\r\n    return (dispatch, getState) => {\r\n\r\n        getService('getSkeletonRange', droneNumber).subscribe(function (response) {\r\n            console.log(\"subscribe: getSkeletonRange\", response);\r\n            try {\r\n                if (getState().map.dronesPositions[droneNumber] && getState().map.dronesPositions[droneNumber].workingOrigin) {\r\n                    if (response && response.point) {\r\n                        //range = (response.data / 1000);\r\n                        //const INDOOR_EXPLORATION = \"INDOOR_EXPLORATION\";\r\n                        //  if(getState().output.missionState.startsWith(INDOOR_EXPLORATION)){\r\n                        dispatch({ type: actionTypes.GET_ENEMY_POSITION, payload: { enemyOffset: response.point, droneNumber } });\r\n                        // } \r\n\r\n                        if (getState().map.selectedDrone == droneNumber) {\r\n                            let skeletonRange = geoCalculations.calculateDistanceBetween2Points(getState().map.dronesPositions[droneNumber].offset, response.point, true);\r\n                            dispatch({ type: actionTypes.UPDATE_SKELETON_RANGE, payload: { skeletonRange : skeletonRange.toFixed(1) } });\r\n                        }\r\n                    }\r\n                }\r\n            } catch {\r\n\r\n            }\r\n\r\n        });\r\n    };\r\n};\r\n\r\nexport const subscribeToWeaponDetection = (droneNumber) => {\r\n    return (dispatch,getState) => {\r\n        console.log(\"subscribe: getDroneExploreState\");\r\n        getService('getDroneExploreState', droneNumber).subscribe(function (response) {\r\n\r\n            //const WEAPON_ID = 1;\r\n            const INDOOR_EXPLORATION = \"INDOOR_EXPLORATION\";\r\n            const INDOOR_EXPLORATION_THREAT = \"INDOOR_EXPLORATION_THREAT\";\r\n\r\n            if (response && response.data) {\r\n            dispatch({ type: actionTypes.SET_MISSION_STATE, payload: { missionState: response.data } });\r\n\r\n                if (response.data && response.data.startsWith(INDOOR_EXPLORATION)) {\r\n                    dispatch({ type: actionTypes.SET_INDOOR_EXPLORATION_FLAG });\r\n                    //    dispatch({ type: actionTypes.SET_WEAPON_DETECTION, payload: { weaponDetected: true } });                \r\n                    //   dispatch(showGlobalMessage({ text: `Threat Detected`, type: logSeverities.warn, isRemoved: true }));                    \r\n                } else if (getState().output.isArmed && response.data === INDOOR_EXPLORATION_THREAT) {\r\n                    dispatch({ type: actionTypes.SET_WEAPON_DETECTION, payload: { weaponDetected: true } });\r\n                    dispatch(showGlobalMessage({ text: `Threat Detected`, type: logSeverities.warn, isRemoved: true }));\r\n                }\r\n\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n\r\n\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\outputActions.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\store\\actions\\plannerActions.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\SingleInputForm\\SingleInputForm.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\AddMissionPlanStageForm\\AddMissionPlanStageForm.js",["317","318","319","320","321","322","323","324"],"import React, { Component } from 'react'\r\nimport cn from './AddMissionPlanStageForm.module.css';\r\nimport Select from '../../controls/Select/Select';\r\nimport Input from '../../controls/Input/Input';\r\n\r\nexport default class AddMissionPlanStageForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedStageType: props.stage && props.stage.selectedStageType || null,\r\n            stageParamsInput: props.stage && props.stage.stageParamsInput || '',\r\n            multiParamsInput: this.parseMultiParams() || {},\r\n            stageId: props.stage && props.stage.stageId || Math.round(Math.random() * 100000),\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.onPopupInitalLoad) {\r\n            this.props.onPopupInitalLoad(this.getMissionPlanState);\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.pointFromMap != this.props.pointFromMap) {\r\n            const pointFromMap = this.props.pointFromMap;\r\n            const stageParamsInput = pointFromMap.x + \",\" + pointFromMap.y + \",\" + pointFromMap.z;\r\n            this.setState({ multiParamsInput: pointFromMap, stageParamsInput })\r\n        }\r\n    }\r\n    parseMultiParams = () => {\r\n        if (this.props.stage && this.props.stage.stageParamsInput && this.props.stage.stageParamsInput != \"\") {\r\n            const [x, y, z] = this.props.stage.stageParamsInput.split(',');\r\n            return { x, y, z };\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n    getMissionPlanState = () => {\r\n        return this.state;\r\n    }\r\n\r\n    handleTypeChange(selectedStageType) {\r\n        this.setState({\r\n            selectedStageType,\r\n            stageParamsInput: '',\r\n            multiParamsInput: {}\r\n        });\r\n    }\r\n\r\n\r\n    renderStageType() {\r\n        const options = [\r\n            { label: 'Takeoff', params: { label: 'Height:', placeHolder: \"meters\" }, rossService: 'addMissionTakeoff' },\r\n            { label: 'Go To Waypoint', isMultiInputs: true, params: { label: 'Waypoint Coordinate:', }, rossService: 'addMissionWP' },\r\n            { label: 'Pause', params: { label: 'Pause for:', placeHolder: \"seconds\" } },\r\n            { label: 'Set Speed', params: { label: 'Speed Value:', placeHolder: \"km/h\" } },\r\n            { label: 'Set Waypoint Radius', params: { label: 'Radius Value:', placeHolder: \"meters\" } },\r\n        ]\r\n\r\n        const dropDownData = {\r\n            label: 'Select Stage Type:',\r\n            defaultValue: this.state.selectedStageType || { label: \"Select...\", value: \"Select...\" },\r\n            options,\r\n            onChange: selectedTypeValue => this.handleTypeChange(selectedTypeValue)\r\n        };\r\n\r\n\r\n        return (\r\n            <div className={cn.Row}>\r\n                <Select {...dropDownData} />\r\n            </div>\r\n        )\r\n    }\r\n    onInputChange(e, subField) {\r\n        let { stageParamsInput, multiParamsInput } = this.state;\r\n        if (subField) {\r\n\r\n            multiParamsInput[subField] = e.target.value;\r\n            stageParamsInput = multiParamsInput.x + \",\" + multiParamsInput.y + \",\" + multiParamsInput.z;\r\n        }\r\n        else {\r\n            stageParamsInput = e.target.value;\r\n        }\r\n        this.setState({ stageParamsInput, multiParamsInput });\r\n\r\n    }\r\n\r\n    renderStageInput() {\r\n        if (!this.state.selectedStageType ||\r\n            !this.state.selectedStageType.params) {\r\n            return;\r\n        }\r\n\r\n        const { selectedStageType, stageParamsInput, multiParamsInput } = this.state;\r\n\r\n\r\n        return (\r\n            <div className={cn.Row}>\r\n                <span className={`${cn.Label}`}>{this.state.selectedStageType.params.label}</span>\r\n                <div className={cn.InputWrapper}>\r\n                    {selectedStageType.isMultiInputs ?\r\n                        <>\r\n\r\n                            {this.getInputField(multiParamsInput.x, 'x')}\r\n                            {this.getInputField(multiParamsInput.y, 'y')}\r\n                            {this.getInputField(multiParamsInput.z, 'z')}\r\n\r\n                        </>\r\n                        :\r\n                        this.getInputField(stageParamsInput)\r\n                    }\r\n                </div>\r\n                {selectedStageType.isMultiInputs && (\r\n                    <div className={cn.InputWrapper}>\r\n                        <span className={`${cn.Icon} ${cn.PositionIcon}`} title=\"Select On Map\" onClick={this.props.selectPointFromMap} />\r\n                        {this.props.getDronePosition && <span className={`${cn.Icon} ${cn.DroneIcon}`} title=\"Get Drone Position\" onClick={this.props.getDronePosition} />}\r\n                    </div>\r\n                )\r\n                }\r\n\r\n                {this.props.isSelectOrigin && <span className={`${cn.Label}`}>{\"Origin angle:\"}</span>}\r\n                {this.props.isSelectOrigin && this.getInputField(multiParamsInput.angle || 0, 'angle')}\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    getInputField = (value, subField) => {\r\n        const selectedStageType = this.state.selectedStageType;\r\n        return (\r\n            <div className={cn.InnerInputWrapper}>\r\n                <Input\r\n                    parentRef={this.inputRef}\r\n                    value={value !== null && value !== undefined ? value : \"\"}\r\n                    onChange={e => this.onInputChange(e, subField)}\r\n                    disabled={false}\r\n                    type={selectedStageType.params.type || \"\"}\r\n                    placeHolder={subField || selectedStageType.params.placeHolder || \"\"}\r\n                    button={selectedStageType.params.button || null}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={cn.Wrapper}>\r\n                {this.props.isSelectOrigin ? \"\" : this.renderStageType()}\r\n                {this.renderStageInput()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\MissionPlanner\\MissionPlanStages\\MissionPlanStage.js",["325"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport cn from './MissionPlanStages.module.css';\r\nimport actionTypes from '../../../store/actions/actionTypes';\r\nimport * as geoCalculations from '../../../utils/geoCalculations';\r\n\r\nclass MissionPlanStage extends Component {\r\n\r\n    renderMenuBtnIcon() {\r\n        return (\r\n            <span className={cn.BtnIconWrapper}>\r\n                <span className={cn.BtnIconBall}></span>\r\n                <span className={cn.BtnIconBall}></span>\r\n                <span className={cn.BtnIconBall}></span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    addOrEditMissionPlanStageFormPopupOkBtnClick = (isAddStage) => {\r\n        const addOrEditStageFormState = this.getAddMissionPlanStageFormState();\r\n        if (addOrEditStageFormState.selectedStageType) {\r\n            if (isAddStage) {\r\n                this.props.addNewStage(addOrEditStageFormState);\r\n            } else {\r\n                this.props.editStage(addOrEditStageFormState, this.props.stageIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAddOrEditStageBtnClicked = (isAddStage = false) => {\r\n        const popupDetails = {\r\n            title: isAddStage ? 'Add New Stage' : `Edit Stage #${this.props.stageIndex + 1} `,\r\n            modalChild: 'AddMissionPlanStageForm',\r\n            modalChildProps: {\r\n                stage: isAddStage ? null : this.props.stage,\r\n                size: 'small',\r\n                onPopupInitalLoad: getChildState => this.getAddMissionPlanStageFormState = getChildState,\r\n                selectPointFromMap:  this.props.togglePointSelectionMode,\r\n                getDronePosition:  this.props.dronesPositions[this.props.selectedDrone] &&  this.props.dronesPositions[this.props.selectedDrone].offset ? this.getDronePosition : undefined\r\n\r\n            },\r\n            onCloseButtonClick: () => { },\r\n            primayButton: {\r\n                title: 'Done',\r\n                callback: () => this.addOrEditMissionPlanStageFormPopupOkBtnClick(isAddStage)\r\n            },\r\n            secondaryButton: {\r\n                title: 'Cancel',\r\n                callback: () => { }\r\n            }\r\n        };\r\n        this.props.showPopup(popupDetails);\r\n    }\r\n\r\n    getDronePosition = () => {\r\n        const dronePosition = this.props.dronesPositions[this.props.selectedDrone];\r\n        let coordinateWithOffset = null;\r\n        if(dronePosition && dronePosition.offset){\r\n            coordinateWithOffset = geoCalculations.getMapCoordinate(dronePosition.workingOrigin , dronePosition.offset);\r\n            this.props.setPositionToPopup(coordinateWithOffset);\r\n        }\r\n    }\r\n\r\n    onMenuBtnClick = e => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const menuItemsList = [\r\n            {\r\n                name: \"Delete\",\r\n                func: () => this.props.deleteStage(this.props.stage.stageId),\r\n                iconCss: \"DeleteIcon\"\r\n            },\r\n            {\r\n                name: \"Edit\",\r\n                func: this.onAddOrEditStageBtnClicked,\r\n                iconCss: \"EditIcon\"\r\n            },\r\n            {\r\n                name: \"Move Back\",\r\n                func: () => this.props.moveStageDown(this.props.stageIndex),\r\n                iconCss: \"ArrowDownIcon\"\r\n            },\r\n            {\r\n                name: \"Move Forward\",\r\n                func: () => this.props.moveStageUp(this.props.stageIndex),\r\n                iconCss: \"ArrowUpIcon\"\r\n            },\r\n        ];\r\n\r\n        this.props.showContextMenu(e.clientX, e.clientY, { side: 'left' }, menuItemsList);\r\n    }\r\n\r\n    renderAddNewStageBtn() {\r\n        if (this.props.isShowAddStageBtn) {\r\n            return <button className={cn.AddNewStageBtn} onClick={() => this.onAddOrEditStageBtnClicked(true)}>+</button>\r\n        }\r\n        return false;\r\n    }\r\n\r\n    renderMenuBtn() {\r\n        const { isShowMenu } = this.props;\r\n        if (!isShowMenu) return null;\r\n        return (\r\n            <button className={cn.MenuBtn} onClick={this.onMenuBtnClick}>{this.renderMenuBtnIcon()}</button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { selectedStageType, stageParamsInput } = this.props.stage;\r\n        let params = stageParamsInput;\r\n        if (selectedStageType.label == \"Go To Waypoint\" && stageParamsInput) {\r\n            const [x, y, z] = stageParamsInput.split(',');\r\n            params = `x: ${x.split(\".\")[0]}\\ny: ${y.split(\".\")[0]}\\nz: ${z.split(\".\")[0]}`\r\n        }\r\n        return (\r\n            <div className={cn.StageWrapper} style={this.props.isShowMenu ? {opacity: 0.6} : {}}>\r\n                {this.renderMenuBtn()}\r\n                <div className={cn.LabelsWrapper}>\r\n                    <div className={cn.StageTypeLabel}>{selectedStageType.label}</div>\r\n                    <div className={cn.StageParamsLabel}>{params}</div>\r\n                </div>\r\n                {this.renderAddNewStageBtn()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dronesPositions: state.map.dronesPositions,\r\n        selectedDrone: state.map.selectedDrone\r\n    }\r\n};\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n    return {\r\n        showPopup: details => dispatch({ type: actionTypes.SHOW_POPUP, payload: details }),\r\n        togglePointSelectionMode: () => dispatch({ type: actionTypes.TOGGLE_POINT_SELECTION_MODE }),\r\n        showContextMenu: (x, y, options, items) => dispatch({ type: actionTypes.SHOW_CONTEXT_MENU, payload: { x, y, options, items } }),\r\n        deleteStage: id => dispatch({ type: actionTypes.DELETE_MISSION_PLAN_STAGE, payload: { id } }),\r\n        editStage: (stage, index) => dispatch({ type: actionTypes.EDIT_MISSION_PLAN_STAGE, payload: { stage, stageIndex: index } }),\r\n        moveStageDown: (index) => dispatch({ type: actionTypes.MOVE_DOWN_MISSION_PLAN_STAGE, payload: index }),\r\n        moveStageUp: (index) => dispatch({ type: actionTypes.MOVE_UP_MISSION_PLAN_STAGE, payload: index }),\r\n        addNewStage: stage => dispatch({ type: actionTypes.ADD_NEW_MISSION_PLAN_STAGE, payload: stage }),\r\n        setPositionToPopup: (position) => dispatch({ type: actionTypes.SELECT_POINT_FROM_MAP, payload: { position } }),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(MissionPlanStage)\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Slider\\Slider.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\SwitchMapForm\\SwitchMapForm.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\utils\\imageUtils.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Input\\Input.js",["326","327","328","329","330","331"],"import React, { Component } from 'react'\r\nimport cn from './Input.module.css';\r\n//import validationX from '../../assets/images/close-red.svg';\r\n//import Tooltip from '../Tooltip/Tooltip';\r\n\r\nexport default class Input extends Component {\r\n    state = {\r\n        isShowInfoTooltip: false\r\n    }\r\n\r\n    showInfoTooltip = e => {\r\n        this.setState({ isShowInfoTooltip: true, clientX: e.target.getBoundingClientRect().left, clientY: e.target.getBoundingClientRect().top });\r\n    }\r\n\r\n    hideTooltip = () => this.setState({ isShowInfoTooltip: false, clientX: null, clientY: null })\r\n\r\n    renderInfo() {\r\n        if (this.props.info) {\r\n            return (\r\n                <span className={cn.InfoImage} onMouseEnter={this.showInfoTooltip} onMouseLeave={this.hideTooltip}>\r\n                    {/* {\r\n                        this.state.isShowInfoTooltip ? \r\n                            (<Tooltip \r\n                                title={this.props.info.title}\r\n                                text={this.props.info.text}\r\n                                x={this.state.clientX}\r\n                                y={this.state.clientY}\r\n                            />) : null\r\n                    } */}\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n\r\n    getInputByType = () => {\r\n        const value = this.props.value;\r\n        switch (this.props.type) {\r\n            case \"Coordinate\":\r\n                return (\r\n                    <div className={cn.InnerInputWrapper}>\r\n                        {this.props.button && <span className={`${cn.Icon} ${cn.PositionIcon}`} title=\"Select On Map\" onClick={() => this.props.button.action()} />}\r\n                        {this.getInputField(value && value.x || \"\", 'X')}\r\n                        {this.getInputField(value && value.y || \"\", 'Y')}\r\n                        {this.getInputField(value && value.z || \"\", 'Z')}\r\n                    </div>)\r\n            default:\r\n                return this.getInputField(value, this.props.placeHolder);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const mandatoyClass = this.props.mandatory ? ` ${cn.Mandatory}` : '';\r\n        const disabled = this.props.disabled ? ` ${cn.Disabled}` : '';\r\n        const errorClass = this.props.error ? ` ${cn.ShowError}` : '';\r\n        const readOnly = this.props.readOnly ? ` ${cn.readOnly}` : '';\r\n        return (\r\n            <div className={`${cn.Row}${disabled}`}>\r\n                <span className={`${cn.Label}${mandatoyClass}`}>{this.props.label}{this.renderInfo()}</span>\r\n                <div className={cn.InputWrapper}>\r\n                <div className={cn.InnerInputWrapper}>\r\n                    <input\r\n                        ref={this.props.parentRef || null}\r\n                        placeholder={this.props.placeHolder}\r\n                        value={this.props.value}\r\n                        name={this.props.name}\r\n                        className={`${cn.Input}${errorClass}${readOnly}`}\r\n                        maxLength={this.props.maxLength || null}\r\n                        type={this.props.type || 'text'}\r\n                        onFocus={this.props.onFocus}\r\n                        onChange={this.props.onChange}\r\n                        readOnly={this.props.readOnly || this.props.disabled} />\r\n                         </div>\r\n                    {/*<img className={`${cn.ValidationImg}${errorClass}`} src={validationX} alt=\"\"/>*/}\r\n                    <div className={`${cn.ValidationMessage}${errorClass}`}>{this.props.error || ''}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\services\\index.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Radio\\Radio.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\RadioGroup\\RadioGroup.js",[],"C:\\Users\\tc03044\\Desktop\\wasp\\gitWasp\\src\\components\\controls\\Toggle\\Toggle.js",[],{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","severity":1,"message":"337","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":30},{"ruleId":"336","severity":1,"message":"340","line":14,"column":10,"nodeType":"338","messageId":"339","endLine":14,"endColumn":16},{"ruleId":"336","severity":1,"message":"341","line":14,"column":18,"nodeType":"338","messageId":"339","endLine":14,"endColumn":23},{"ruleId":"342","severity":1,"message":"343","line":185,"column":56,"nodeType":"344","messageId":"345","endLine":185,"endColumn":58},{"ruleId":"342","severity":1,"message":"343","line":188,"column":62,"nodeType":"344","messageId":"345","endLine":188,"endColumn":64},{"ruleId":"346","severity":1,"message":"347","line":44,"column":17,"nodeType":"348","endLine":44,"endColumn":81},{"ruleId":"349","severity":1,"message":"350","line":45,"column":21,"nodeType":"348","endLine":45,"endColumn":67},{"ruleId":"349","severity":1,"message":"350","line":31,"column":16,"nodeType":"348","endLine":31,"endColumn":60},{"ruleId":"336","severity":1,"message":"351","line":221,"column":15,"nodeType":"338","messageId":"339","endLine":221,"endColumn":19},{"ruleId":"346","severity":1,"message":"347","line":227,"column":21,"nodeType":"348","endLine":227,"endColumn":148},{"ruleId":"336","severity":1,"message":"352","line":4,"column":8,"nodeType":"338","messageId":"339","endLine":4,"endColumn":14},{"ruleId":"349","severity":1,"message":"350","line":185,"column":21,"nodeType":"348","endLine":185,"endColumn":124},{"ruleId":"349","severity":1,"message":"350","line":192,"column":17,"nodeType":"348","endLine":205,"endColumn":19},{"ruleId":"336","severity":1,"message":"353","line":3,"column":8,"nodeType":"338","messageId":"339","endLine":3,"endColumn":23},{"ruleId":"336","severity":1,"message":"354","line":5,"column":8,"nodeType":"338","messageId":"339","endLine":5,"endColumn":15},{"ruleId":"336","severity":1,"message":"355","line":10,"column":8,"nodeType":"338","messageId":"339","endLine":10,"endColumn":20},{"ruleId":"342","severity":1,"message":"356","line":70,"column":35,"nodeType":"344","messageId":"345","endLine":70,"endColumn":37},{"ruleId":"349","severity":1,"message":"350","line":97,"column":28,"nodeType":"348","endLine":97,"endColumn":81},{"ruleId":"342","severity":1,"message":"343","line":120,"column":74,"nodeType":"344","messageId":"345","endLine":120,"endColumn":76},{"ruleId":"342","severity":1,"message":"343","line":124,"column":74,"nodeType":"344","messageId":"345","endLine":124,"endColumn":76},{"ruleId":"342","severity":1,"message":"343","line":128,"column":74,"nodeType":"344","messageId":"345","endLine":128,"endColumn":76},{"ruleId":"342","severity":1,"message":"343","line":132,"column":74,"nodeType":"344","messageId":"345","endLine":132,"endColumn":76},{"ruleId":"349","severity":1,"message":"350","line":157,"column":13,"nodeType":"348","endLine":169,"endColumn":15},{"ruleId":"349","severity":1,"message":"350","line":170,"column":43,"nodeType":"348","endLine":170,"endColumn":95},{"ruleId":"349","severity":1,"message":"350","line":177,"column":13,"nodeType":"348","endLine":189,"endColumn":15},{"ruleId":"349","severity":1,"message":"350","line":196,"column":13,"nodeType":"348","endLine":207,"endColumn":15},{"ruleId":"336","severity":1,"message":"357","line":1,"column":32,"nodeType":"338","messageId":"339","endLine":1,"endColumn":41},{"ruleId":"336","severity":1,"message":"354","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":52,"column":19,"nodeType":"360","messageId":"361","endLine":52,"endColumn":26,"fix":"362"},{"ruleId":"358","severity":1,"message":"359","line":67,"column":23,"nodeType":"360","messageId":"361","endLine":67,"endColumn":31,"fix":"363"},{"ruleId":"358","severity":1,"message":"359","line":68,"column":28,"nodeType":"360","messageId":"361","endLine":68,"endColumn":36,"fix":"364"},{"ruleId":"342","severity":1,"message":"356","line":116,"column":40,"nodeType":"344","messageId":"345","endLine":116,"endColumn":42},{"ruleId":"342","severity":1,"message":"356","line":122,"column":66,"nodeType":"344","messageId":"345","endLine":122,"endColumn":68},{"ruleId":"342","severity":1,"message":"356","line":130,"column":72,"nodeType":"344","messageId":"345","endLine":130,"endColumn":74},{"ruleId":"342","severity":1,"message":"356","line":141,"column":38,"nodeType":"344","messageId":"345","endLine":141,"endColumn":40},{"ruleId":"342","severity":1,"message":"343","line":144,"column":76,"nodeType":"344","messageId":"345","endLine":144,"endColumn":78},{"ruleId":"342","severity":1,"message":"343","line":152,"column":25,"nodeType":"344","messageId":"345","endLine":152,"endColumn":27},{"ruleId":"342","severity":1,"message":"356","line":153,"column":26,"nodeType":"344","messageId":"345","endLine":153,"endColumn":28},{"ruleId":"342","severity":1,"message":"356","line":153,"column":71,"nodeType":"344","messageId":"345","endLine":153,"endColumn":73},{"ruleId":"342","severity":1,"message":"343","line":156,"column":30,"nodeType":"344","messageId":"345","endLine":156,"endColumn":32},{"ruleId":"342","severity":1,"message":"356","line":157,"column":26,"nodeType":"344","messageId":"345","endLine":157,"endColumn":28},{"ruleId":"342","severity":1,"message":"356","line":157,"column":73,"nodeType":"344","messageId":"345","endLine":157,"endColumn":75},{"ruleId":"342","severity":1,"message":"343","line":243,"column":44,"nodeType":"344","messageId":"345","endLine":243,"endColumn":46},{"ruleId":"342","severity":1,"message":"343","line":247,"column":44,"nodeType":"344","messageId":"345","endLine":247,"endColumn":46},{"ruleId":"336","severity":1,"message":"365","line":252,"column":17,"nodeType":"338","messageId":"339","endLine":252,"endColumn":22},{"ruleId":"336","severity":1,"message":"366","line":281,"column":15,"nodeType":"338","messageId":"339","endLine":281,"endColumn":26},{"ruleId":"342","severity":1,"message":"343","line":336,"column":57,"nodeType":"344","messageId":"345","endLine":336,"endColumn":59},{"ruleId":"342","severity":1,"message":"343","line":339,"column":62,"nodeType":"344","messageId":"345","endLine":339,"endColumn":64},{"ruleId":"342","severity":1,"message":"343","line":346,"column":64,"nodeType":"344","messageId":"345","endLine":346,"endColumn":66},{"ruleId":"342","severity":1,"message":"343","line":381,"column":64,"nodeType":"344","messageId":"345","endLine":381,"endColumn":66},{"ruleId":"342","severity":1,"message":"356","line":469,"column":41,"nodeType":"344","messageId":"345","endLine":469,"endColumn":43},{"ruleId":"342","severity":1,"message":"356","line":475,"column":50,"nodeType":"344","messageId":"345","endLine":475,"endColumn":52},{"ruleId":"342","severity":1,"message":"343","line":499,"column":42,"nodeType":"344","messageId":"345","endLine":499,"endColumn":44},{"ruleId":"342","severity":1,"message":"343","line":508,"column":42,"nodeType":"344","messageId":"345","endLine":508,"endColumn":44},{"ruleId":"342","severity":1,"message":"343","line":517,"column":42,"nodeType":"344","messageId":"345","endLine":517,"endColumn":44},{"ruleId":"342","severity":1,"message":"343","line":527,"column":42,"nodeType":"344","messageId":"345","endLine":527,"endColumn":44},{"ruleId":"342","severity":1,"message":"343","line":537,"column":42,"nodeType":"344","messageId":"345","endLine":537,"endColumn":44},{"ruleId":"342","severity":1,"message":"343","line":549,"column":68,"nodeType":"344","messageId":"345","endLine":549,"endColumn":70},{"ruleId":"342","severity":1,"message":"343","line":583,"column":52,"nodeType":"344","messageId":"345","endLine":583,"endColumn":54},{"ruleId":"342","severity":1,"message":"356","line":594,"column":123,"nodeType":"344","messageId":"345","endLine":594,"endColumn":125},{"ruleId":"342","severity":1,"message":"343","line":605,"column":57,"nodeType":"344","messageId":"345","endLine":605,"endColumn":59},{"ruleId":"342","severity":1,"message":"343","line":631,"column":48,"nodeType":"344","messageId":"345","endLine":631,"endColumn":50},{"ruleId":"342","severity":1,"message":"356","line":635,"column":60,"nodeType":"344","messageId":"345","endLine":635,"endColumn":62},{"ruleId":"367","severity":1,"message":"368","line":641,"column":144,"nodeType":"344","messageId":"369","endLine":641,"endColumn":145},{"ruleId":"342","severity":1,"message":"343","line":670,"column":29,"nodeType":"344","messageId":"345","endLine":670,"endColumn":31},{"ruleId":"342","severity":1,"message":"356","line":678,"column":34,"nodeType":"344","messageId":"345","endLine":678,"endColumn":36},{"ruleId":"342","severity":1,"message":"343","line":722,"column":65,"nodeType":"344","messageId":"345","endLine":722,"endColumn":67},{"ruleId":"358","severity":1,"message":"359","line":781,"column":32,"nodeType":"360","messageId":"361","endLine":781,"endColumn":40,"fix":"370"},{"ruleId":"342","severity":1,"message":"356","line":794,"column":44,"nodeType":"344","messageId":"345","endLine":794,"endColumn":46},{"ruleId":"336","severity":1,"message":"371","line":795,"column":17,"nodeType":"338","messageId":"339","endLine":795,"endColumn":22},{"ruleId":"342","severity":1,"message":"343","line":805,"column":58,"nodeType":"344","messageId":"345","endLine":805,"endColumn":60},{"ruleId":"342","severity":1,"message":"356","line":936,"column":63,"nodeType":"344","messageId":"345","endLine":936,"endColumn":65},{"ruleId":"342","severity":1,"message":"356","line":939,"column":117,"nodeType":"344","messageId":"345","endLine":939,"endColumn":119},{"ruleId":"342","severity":1,"message":"343","line":972,"column":62,"nodeType":"344","messageId":"345","endLine":972,"endColumn":64},{"ruleId":"342","severity":1,"message":"343","line":992,"column":36,"nodeType":"344","messageId":"345","endLine":992,"endColumn":38},{"ruleId":"336","severity":1,"message":"372","line":1003,"column":13,"nodeType":"338","messageId":"339","endLine":1003,"endColumn":29},{"ruleId":"342","severity":1,"message":"343","line":1059,"column":40,"nodeType":"344","messageId":"345","endLine":1059,"endColumn":42},{"ruleId":"342","severity":1,"message":"356","line":1082,"column":45,"nodeType":"344","messageId":"345","endLine":1082,"endColumn":47},{"ruleId":"342","severity":1,"message":"343","line":1099,"column":51,"nodeType":"344","messageId":"345","endLine":1099,"endColumn":53},{"ruleId":"342","severity":1,"message":"343","line":1116,"column":23,"nodeType":"344","messageId":"345","endLine":1116,"endColumn":25},{"ruleId":"342","severity":1,"message":"356","line":1117,"column":34,"nodeType":"344","messageId":"345","endLine":1117,"endColumn":36},{"ruleId":"342","severity":1,"message":"343","line":1119,"column":48,"nodeType":"344","messageId":"345","endLine":1119,"endColumn":50},{"ruleId":"342","severity":1,"message":"356","line":1151,"column":49,"nodeType":"344","messageId":"345","endLine":1151,"endColumn":51},{"ruleId":"342","severity":1,"message":"343","line":1156,"column":30,"nodeType":"344","messageId":"345","endLine":1156,"endColumn":32},{"ruleId":"342","severity":1,"message":"343","line":1165,"column":33,"nodeType":"344","messageId":"345","endLine":1165,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":1170,"column":20,"nodeType":"344","messageId":"345","endLine":1170,"endColumn":22},{"ruleId":"342","severity":1,"message":"343","line":1170,"column":47,"nodeType":"344","messageId":"345","endLine":1170,"endColumn":49},{"ruleId":"342","severity":1,"message":"356","line":1196,"column":45,"nodeType":"344","messageId":"345","endLine":1196,"endColumn":47},{"ruleId":"342","severity":1,"message":"343","line":1202,"column":21,"nodeType":"344","messageId":"345","endLine":1202,"endColumn":23},{"ruleId":"342","severity":1,"message":"356","line":1218,"column":45,"nodeType":"344","messageId":"345","endLine":1218,"endColumn":47},{"ruleId":"342","severity":1,"message":"343","line":1227,"column":45,"nodeType":"344","messageId":"345","endLine":1227,"endColumn":47},{"ruleId":"342","severity":1,"message":"343","line":1241,"column":21,"nodeType":"344","messageId":"345","endLine":1241,"endColumn":23},{"ruleId":"342","severity":1,"message":"343","line":1253,"column":41,"nodeType":"344","messageId":"345","endLine":1253,"endColumn":43},{"ruleId":"342","severity":1,"message":"343","line":1255,"column":127,"nodeType":"344","messageId":"345","endLine":1255,"endColumn":129},{"ruleId":"342","severity":1,"message":"343","line":1749,"column":63,"nodeType":"344","messageId":"345","endLine":1749,"endColumn":65},{"ruleId":"342","severity":1,"message":"343","line":1788,"column":40,"nodeType":"344","messageId":"345","endLine":1788,"endColumn":42},{"ruleId":"342","severity":1,"message":"343","line":1836,"column":23,"nodeType":"344","messageId":"345","endLine":1836,"endColumn":25},{"ruleId":"342","severity":1,"message":"343","line":1867,"column":21,"nodeType":"344","messageId":"345","endLine":1867,"endColumn":23},{"ruleId":"373","severity":1,"message":"374","line":1893,"column":9,"nodeType":"375","messageId":"376","endLine":1916,"endColumn":10},{"ruleId":"342","severity":1,"message":"343","line":1938,"column":71,"nodeType":"344","messageId":"345","endLine":1938,"endColumn":73},{"ruleId":"377","severity":1,"message":"378","line":1943,"column":33,"nodeType":"379","messageId":"345","endLine":1943,"endColumn":37},{"ruleId":"377","severity":1,"message":"378","line":1948,"column":31,"nodeType":"379","messageId":"345","endLine":1948,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":2039,"column":57,"nodeType":"344","messageId":"345","endLine":2039,"endColumn":59},{"ruleId":"342","severity":1,"message":"343","line":2058,"column":36,"nodeType":"344","messageId":"345","endLine":2058,"endColumn":38},{"ruleId":"358","severity":1,"message":"359","line":2088,"column":28,"nodeType":"360","messageId":"361","endLine":2088,"endColumn":35,"fix":"380"},{"ruleId":"358","severity":1,"message":"359","line":2096,"column":32,"nodeType":"360","messageId":"361","endLine":2096,"endColumn":40,"fix":"381"},{"ruleId":"358","severity":1,"message":"359","line":2097,"column":37,"nodeType":"360","messageId":"361","endLine":2097,"endColumn":45,"fix":"382"},{"ruleId":"336","severity":1,"message":"383","line":2208,"column":15,"nodeType":"338","messageId":"339","endLine":2208,"endColumn":23},{"ruleId":"342","severity":1,"message":"343","line":207,"column":58,"nodeType":"344","messageId":"345","endLine":207,"endColumn":60},{"ruleId":"384","severity":1,"message":"385","line":11,"column":44,"nodeType":"386","messageId":"387","endLine":11,"endColumn":46},{"ruleId":"384","severity":1,"message":"385","line":11,"column":77,"nodeType":"386","messageId":"387","endLine":11,"endColumn":79},{"ruleId":"384","severity":1,"message":"385","line":12,"column":43,"nodeType":"386","messageId":"387","endLine":12,"endColumn":45},{"ruleId":"384","severity":1,"message":"385","line":12,"column":75,"nodeType":"386","messageId":"387","endLine":12,"endColumn":77},{"ruleId":"384","severity":1,"message":"385","line":14,"column":34,"nodeType":"386","messageId":"387","endLine":14,"endColumn":36},{"ruleId":"384","severity":1,"message":"385","line":14,"column":57,"nodeType":"386","messageId":"387","endLine":14,"endColumn":59},{"ruleId":"342","severity":1,"message":"356","line":24,"column":36,"nodeType":"344","messageId":"345","endLine":24,"endColumn":38},{"ruleId":"342","severity":1,"message":"356","line":31,"column":104,"nodeType":"344","messageId":"345","endLine":31,"endColumn":106},{"ruleId":"342","severity":1,"message":"343","line":112,"column":37,"nodeType":"344","messageId":"345","endLine":112,"endColumn":39},{"ruleId":"384","severity":1,"message":"385","line":42,"column":51,"nodeType":"386","messageId":"387","endLine":42,"endColumn":53},{"ruleId":"384","severity":1,"message":"385","line":42,"column":62,"nodeType":"386","messageId":"387","endLine":42,"endColumn":64},{"ruleId":"384","severity":1,"message":"385","line":43,"column":51,"nodeType":"386","messageId":"387","endLine":43,"endColumn":53},{"ruleId":"384","severity":1,"message":"385","line":43,"column":62,"nodeType":"386","messageId":"387","endLine":43,"endColumn":64},{"ruleId":"384","severity":1,"message":"385","line":44,"column":51,"nodeType":"386","messageId":"387","endLine":44,"endColumn":53},{"ruleId":"384","severity":1,"message":"385","line":44,"column":62,"nodeType":"386","messageId":"387","endLine":44,"endColumn":64},"no-native-reassign",["388"],"no-negated-in-lhs",["389"],"no-unused-vars","'PureComponent' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'icon' is assigned a value but never used.","'config' is defined but never used.","'WeaponDetection' is defined but never used.","'actions' is defined but never used.","'rosWebSocket' is defined but never used.","Expected '!==' and instead saw '!='.","'Component' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"390","text":"391"},{"range":"392","text":"391"},{"range":"393","text":"391"},"'index' is assigned a value but never used.","'droneMapUrl' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",{"range":"394","text":"391"},"'usage' is assigned a value but never used.","'CanvasesInColumn' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-eval","eval can be harmful.","CallExpression",{"range":"395","text":"391"},{"range":"396","text":"391"},{"range":"397","text":"391"},"'dtmLayer' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",[2075,2075],"()",[2463,2463],[2512,2512],[38587,38587],[98557,98557],[98839,98839],[98897,98897]]